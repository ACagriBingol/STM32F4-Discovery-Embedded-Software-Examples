
0_FREERTOS_HAL_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012dd4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012de8  20012de8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000940a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfb  00000000  00000000  0002944e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002b150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000820  00000000  00000000  0002ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020508  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a78c  00000000  00000000  0004c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7a88  00000000  00000000  00056f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e994  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000234c  00000000  00000000  0011e9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b8c 	.word	0x08003b8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003b8c 	.word	0x08003b8c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 f9d1 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f825 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f881 	bl	80005e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(readButtonStateTask, "Buton", configMINIMAL_STACK_SIZE, NULL, 3, &myButtonTaskHandle);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x40>)
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2303      	movs	r3, #3
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2282      	movs	r2, #130	; 0x82
 80004f2:	4909      	ldr	r1, [pc, #36]	; (8000518 <main+0x44>)
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x48>)
 80004f6:	f001 fcd5 	bl	8001ea4 <xTaskCreate>
  xTaskCreate(ledFlashTask, "Led"  , configMINIMAL_STACK_SIZE, NULL, 3, &myLedTaskHandle);
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x4c>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2303      	movs	r3, #3
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2282      	movs	r2, #130	; 0x82
 8000506:	4907      	ldr	r1, [pc, #28]	; (8000524 <main+0x50>)
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x54>)
 800050a:	f001 fccb 	bl	8001ea4 <xTaskCreate>
  vTaskStartScheduler();
 800050e:	f001 fe79 	bl	8002204 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x3e>
 8000514:	20000030 	.word	0x20000030
 8000518:	08003ba4 	.word	0x08003ba4
 800051c:	0800068d 	.word	0x0800068d
 8000520:	20000034 	.word	0x20000034
 8000524:	08003bac 	.word	0x08003bac
 8000528:	080006e1 	.word	0x080006e1

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fb1e 	bl	8003b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xb4>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xb4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <SystemClock_Config+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <SystemClock_Config+0xb8>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SystemClock_Config+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fc9b 	bl	8000ed8 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a8:	f000 f8ea 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fefe 	bl	80013c8 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d2:	f000 f8d5 	bl	8000780 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <MX_GPIO_Init+0x98>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_GPIO_Init+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <MX_GPIO_Init+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_GPIO_Init+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <MX_GPIO_Init+0x9c>)
 800063e:	f000 fc17 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0xa0>)
 8000656:	f000 fa57 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800065a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_GPIO_Init+0x9c>)
 8000674:	f000 fa48 	bl	8000b08 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40020000 	.word	0x40020000

0800068c <readButtonStateTask>:

/* USER CODE BEGIN 4 */
void readButtonStateTask(void *params)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000694:	2101      	movs	r1, #1
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <readButtonStateTask+0x4c>)
 8000698:	f000 fbd2 	bl	8000e40 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d1f8      	bne.n	8000694 <readButtonStateTask+0x8>
		  {
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80006a2:	e008      	b.n	80006b6 <readButtonStateTask+0x2a>
			ButtonCount +=1;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <readButtonStateTask+0x50>)
 80006a6:	f993 3000 	ldrsb.w	r3, [r3]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <readButtonStateTask+0x50>)
 80006b4:	701a      	strb	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80006b6:	2101      	movs	r1, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <readButtonStateTask+0x4c>)
 80006ba:	f000 fbc1 	bl	8000e40 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d0ef      	beq.n	80006a4 <readButtonStateTask+0x18>
			if(ButtonCount==5)
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <readButtonStateTask+0x50>)
 80006c6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ca:	2b05      	cmp	r3, #5
 80006cc:	d1e2      	bne.n	8000694 <readButtonStateTask+0x8>
			{
				ButtonCount=0;
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <readButtonStateTask+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80006d4:	e7de      	b.n	8000694 <readButtonStateTask+0x8>
 80006d6:	bf00      	nop
 80006d8:	40020000 	.word	0x40020000
 80006dc:	20000038 	.word	0x20000038

080006e0 <ledFlashTask>:


	  }
}
void ledFlashTask(void *params)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(ButtonCount==0)
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <ledFlashTask+0x98>)
 80006ea:	f993 3000 	ldrsb.w	r3, [r3]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d106      	bne.n	8000700 <ledFlashTask+0x20>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15,GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f8:	4820      	ldr	r0, [pc, #128]	; (800077c <ledFlashTask+0x9c>)
 80006fa:	f000 fbb9 	bl	8000e70 <HAL_GPIO_WritePin>
 80006fe:	e7f3      	b.n	80006e8 <ledFlashTask+0x8>
		  }
		  else if (ButtonCount==1)
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <ledFlashTask+0x98>)
 8000702:	f993 3000 	ldrsb.w	r3, [r3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d109      	bne.n	800071e <ledFlashTask+0x3e>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800070a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800070e:	481b      	ldr	r0, [pc, #108]	; (800077c <ledFlashTask+0x9c>)
 8000710:	f000 fbc7 	bl	8000ea2 <HAL_GPIO_TogglePin>
			  vTaskDelay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f001 fd40 	bl	800219c <vTaskDelay>
 800071c:	e7e4      	b.n	80006e8 <ledFlashTask+0x8>
		  }
		  else if (ButtonCount==2)
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <ledFlashTask+0x98>)
 8000720:	f993 3000 	ldrsb.w	r3, [r3]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d109      	bne.n	800073c <ledFlashTask+0x5c>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000728:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <ledFlashTask+0x9c>)
 800072e:	f000 fbb8 	bl	8000ea2 <HAL_GPIO_TogglePin>
			  vTaskDelay(750);
 8000732:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000736:	f001 fd31 	bl	800219c <vTaskDelay>
 800073a:	e7d5      	b.n	80006e8 <ledFlashTask+0x8>
		  }
		  else if (ButtonCount==3)
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <ledFlashTask+0x98>)
 800073e:	f993 3000 	ldrsb.w	r3, [r3]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d109      	bne.n	800075a <ledFlashTask+0x7a>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000746:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800074a:	480c      	ldr	r0, [pc, #48]	; (800077c <ledFlashTask+0x9c>)
 800074c:	f000 fba9 	bl	8000ea2 <HAL_GPIO_TogglePin>
			  vTaskDelay(500);
 8000750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000754:	f001 fd22 	bl	800219c <vTaskDelay>
 8000758:	e7c6      	b.n	80006e8 <ledFlashTask+0x8>
		  }
		  else if (ButtonCount==4)
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <ledFlashTask+0x98>)
 800075c:	f993 3000 	ldrsb.w	r3, [r3]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d1c1      	bne.n	80006e8 <ledFlashTask+0x8>
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8000764:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <ledFlashTask+0x9c>)
 800076a:	f000 fb9a 	bl	8000ea2 <HAL_GPIO_TogglePin>
			  vTaskDelay(250);
 800076e:	20fa      	movs	r0, #250	; 0xfa
 8000770:	f001 fd14 	bl	800219c <vTaskDelay>
		  if(ButtonCount==0)
 8000774:	e7b8      	b.n	80006e8 <ledFlashTask+0x8>
 8000776:	bf00      	nop
 8000778:	20000038 	.word	0x20000038
 800077c:	40020c00 	.word	0x40020c00

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ca:	2007      	movs	r0, #7
 80007cc:	f000 f968 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000832:	490e      	ldr	r1, [pc, #56]	; (800086c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000848:	4c0b      	ldr	r4, [pc, #44]	; (8000878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000856:	f7ff ffd7 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f003 f95d 	bl	8003b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085e:	f7ff fe39 	bl	80004d4 <main>
  bx  lr    
 8000862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000870:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8000874:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000878:	20012de8 	.word	0x20012de8

0800087c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC_IRQHandler>
	...

08000880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_Init+0x40>)
 800088a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800088e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_Init+0x40>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_Init+0x40>)
 80008a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f8f9 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff6a 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023c00 	.word	0x40023c00

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f903 	bl	8000aee <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f8d9 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000003c 	.word	0x2000003c

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff47 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff5c 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffb0 	bl	8000a5c <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	; 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e16b      	b.n	8000dfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b24:	2201      	movs	r2, #1
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 815a 	bne.w	8000df6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d005      	beq.n	8000b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d130      	bne.n	8000bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0201 	and.w	r2, r3, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d017      	beq.n	8000bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d123      	bne.n	8000c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	69b9      	ldr	r1, [r7, #24]
 8000c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0203 	and.w	r2, r3, #3
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 80b4 	beq.w	8000df6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b60      	ldr	r3, [pc, #384]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a5f      	ldr	r2, [pc, #380]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <HAL_GPIO_Init+0x30c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000caa:	4a5b      	ldr	r2, [pc, #364]	; (8000e18 <HAL_GPIO_Init+0x310>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_GPIO_Init+0x314>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d02b      	beq.n	8000d2e <HAL_GPIO_Init+0x226>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a51      	ldr	r2, [pc, #324]	; (8000e20 <HAL_GPIO_Init+0x318>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d025      	beq.n	8000d2a <HAL_GPIO_Init+0x222>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a50      	ldr	r2, [pc, #320]	; (8000e24 <HAL_GPIO_Init+0x31c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01f      	beq.n	8000d26 <HAL_GPIO_Init+0x21e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <HAL_GPIO_Init+0x320>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d019      	beq.n	8000d22 <HAL_GPIO_Init+0x21a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <HAL_GPIO_Init+0x324>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d013      	beq.n	8000d1e <HAL_GPIO_Init+0x216>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4d      	ldr	r2, [pc, #308]	; (8000e30 <HAL_GPIO_Init+0x328>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00d      	beq.n	8000d1a <HAL_GPIO_Init+0x212>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <HAL_GPIO_Init+0x32c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d007      	beq.n	8000d16 <HAL_GPIO_Init+0x20e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4b      	ldr	r2, [pc, #300]	; (8000e38 <HAL_GPIO_Init+0x330>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_GPIO_Init+0x20a>
 8000d0e:	2307      	movs	r3, #7
 8000d10:	e00e      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d12:	2308      	movs	r3, #8
 8000d14:	e00c      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d16:	2306      	movs	r3, #6
 8000d18:	e00a      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	e008      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e004      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d26:	2302      	movs	r3, #2
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e000      	b.n	8000d30 <HAL_GPIO_Init+0x228>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	f002 0203 	and.w	r2, r2, #3
 8000d36:	0092      	lsls	r2, r2, #2
 8000d38:	4093      	lsls	r3, r2
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d40:	4935      	ldr	r1, [pc, #212]	; (8000e18 <HAL_GPIO_Init+0x310>)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	3302      	adds	r3, #2
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d72:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc6:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_GPIO_Init+0x334>)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	f67f ae90 	bls.w	8000b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40021400 	.word	0x40021400
 8000e34:	40021800 	.word	0x40021800
 8000e38:	40021c00 	.word	0x40021c00
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e001      	b.n	8000e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e8c:	e003      	b.n	8000e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	619a      	str	r2, [r3, #24]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	619a      	str	r2, [r3, #24]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e267      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d075      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d00c      	beq.n	8000f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f02:	4b85      	ldr	r3, [pc, #532]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d112      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f1a:	d10b      	bne.n	8000f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1c:	4b7e      	ldr	r3, [pc, #504]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d05b      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x108>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d157      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e242      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d106      	bne.n	8000f4c <HAL_RCC_OscConfig+0x74>
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a75      	ldr	r2, [pc, #468]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e01d      	b.n	8000f88 <HAL_RCC_OscConfig+0xb0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x98>
 8000f56:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6f      	ldr	r2, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a6c      	ldr	r2, [pc, #432]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0xb0>
 8000f70:	4b69      	ldr	r3, [pc, #420]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a68      	ldr	r2, [pc, #416]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a65      	ldr	r2, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcc8 	bl	8000924 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fcc4 	bl	8000924 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e207      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000faa:	4b5b      	ldr	r3, [pc, #364]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f0      	beq.n	8000f98 <HAL_RCC_OscConfig+0xc0>
 8000fb6:	e014      	b.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fcb4 	bl	8000924 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fcb0 	bl	8000924 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e1f3      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd2:	4b51      	ldr	r3, [pc, #324]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xe8>
 8000fde:	e000      	b.n	8000fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d063      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffa:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001002:	2b08      	cmp	r3, #8
 8001004:	d11c      	bne.n	8001040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d116      	bne.n	8001040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <HAL_RCC_OscConfig+0x152>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d001      	beq.n	800102a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e1c7      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800103e:	e03a      	b.n	80010b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d020      	beq.n	800108a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_RCC_OscConfig+0x244>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fc69 	bl	8000924 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fc65 	bl	8000924 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e1a8      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4925      	ldr	r1, [pc, #148]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e015      	b.n	80010b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <HAL_RCC_OscConfig+0x244>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001090:	f7ff fc48 	bl	8000924 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fc44 	bl	8000924 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e187      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d036      	beq.n	8001130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d016      	beq.n	80010f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_RCC_OscConfig+0x248>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fc28 	bl	8000924 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc24 	bl	8000924 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e167      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_RCC_OscConfig+0x240>)
 80010ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x200>
 80010f6:	e01b      	b.n	8001130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_RCC_OscConfig+0x248>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fc11 	bl	8000924 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	e00e      	b.n	8001124 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fc0d 	bl	8000924 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d907      	bls.n	8001124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e150      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
 8001118:	40023800 	.word	0x40023800
 800111c:	42470000 	.word	0x42470000
 8001120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001124:	4b88      	ldr	r3, [pc, #544]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1ea      	bne.n	8001106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8097 	beq.w	800126c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001142:	4b81      	ldr	r3, [pc, #516]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b7d      	ldr	r3, [pc, #500]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a7c      	ldr	r2, [pc, #496]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	4b77      	ldr	r3, [pc, #476]	; (800134c <HAL_RCC_OscConfig+0x474>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d118      	bne.n	80011ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117a:	4b74      	ldr	r3, [pc, #464]	; (800134c <HAL_RCC_OscConfig+0x474>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a73      	ldr	r2, [pc, #460]	; (800134c <HAL_RCC_OscConfig+0x474>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001186:	f7ff fbcd 	bl	8000924 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118e:	f7ff fbc9 	bl	8000924 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e10c      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a0:	4b6a      	ldr	r3, [pc, #424]	; (800134c <HAL_RCC_OscConfig+0x474>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2ea>
 80011b4:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b8:	4a63      	ldr	r2, [pc, #396]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6713      	str	r3, [r2, #112]	; 0x70
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x324>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x30c>
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6713      	str	r3, [r2, #112]	; 0x70
 80011d6:	4b5c      	ldr	r3, [pc, #368]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a5b      	ldr	r2, [pc, #364]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0x324>
 80011e4:	4b58      	ldr	r3, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	4a57      	ldr	r2, [pc, #348]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	6713      	str	r3, [r2, #112]	; 0x70
 80011f0:	4b55      	ldr	r3, [pc, #340]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f4:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d015      	beq.n	8001230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001204:	f7ff fb8e 	bl	8000924 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120a:	e00a      	b.n	8001222 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800120c:	f7ff fb8a 	bl	8000924 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e0cb      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0ee      	beq.n	800120c <HAL_RCC_OscConfig+0x334>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fb78 	bl	8000924 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001236:	e00a      	b.n	800124e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff fb74 	bl	8000924 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e0b5      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ee      	bne.n	8001238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d105      	bne.n	800126c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a38      	ldr	r2, [pc, #224]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a1 	beq.w	80013b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b08      	cmp	r3, #8
 8001280:	d05c      	beq.n	800133c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d141      	bne.n	800130e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_RCC_OscConfig+0x478>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb48 	bl	8000924 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff fb44 	bl	8000924 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e087      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69da      	ldr	r2, [r3, #28]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	019b      	lsls	r3, r3, #6
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	3b01      	subs	r3, #1
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x478>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb1d 	bl	8000924 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb19 	bl	8000924 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e05c      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x416>
 800130c:	e054      	b.n	80013b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_RCC_OscConfig+0x478>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb06 	bl	8000924 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb02 	bl	8000924 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e045      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_RCC_OscConfig+0x470>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x444>
 800133a:	e03d      	b.n	80013b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e038      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000
 8001350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x4ec>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d028      	beq.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d121      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d11a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001384:	4013      	ands	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800138a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138c:	4293      	cmp	r3, r2
 800138e:	d111      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	085b      	lsrs	r3, r3, #1
 800139c:	3b01      	subs	r3, #1
 800139e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d107      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0cc      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d90c      	bls.n	8001404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800143e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d044      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d119      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e067      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4934      	ldr	r1, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fa34 	bl	8000924 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fa30 	bl	8000924 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e04f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d20c      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	fa22 f303 	lsr.w	r3, r2, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f9a8 	bl	80008c4 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	40023800 	.word	0x40023800
 8001588:	08003bc8 	.word	0x08003bc8
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001598:	b094      	sub	sp, #80	; 0x50
 800159a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
 80015a0:	2300      	movs	r3, #0
 80015a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a4:	2300      	movs	r3, #0
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ac:	4b79      	ldr	r3, [pc, #484]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d00d      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x40>
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	f200 80e1 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_RCC_GetSysClockFreq+0x34>
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d003      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x3a>
 80015c6:	e0db      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c8:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_GetSysClockFreq+0x204>)
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015cc:	e0db      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_GetSysClockFreq+0x208>)
 80015d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015d2:	e0d8      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015de:	4b6d      	ldr	r3, [pc, #436]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ea:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	2200      	movs	r2, #0
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	2300      	movs	r3, #0
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
 8001602:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	0159      	lsls	r1, r3, #5
 8001614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001618:	0150      	lsls	r0, r2, #5
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4621      	mov	r1, r4
 8001620:	1a51      	subs	r1, r2, r1
 8001622:	6139      	str	r1, [r7, #16]
 8001624:	4629      	mov	r1, r5
 8001626:	eb63 0301 	sbc.w	r3, r3, r1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001638:	4659      	mov	r1, fp
 800163a:	018b      	lsls	r3, r1, #6
 800163c:	4651      	mov	r1, sl
 800163e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001642:	4651      	mov	r1, sl
 8001644:	018a      	lsls	r2, r1, #6
 8001646:	4651      	mov	r1, sl
 8001648:	ebb2 0801 	subs.w	r8, r2, r1
 800164c:	4659      	mov	r1, fp
 800164e:	eb63 0901 	sbc.w	r9, r3, r1
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800165e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001666:	4690      	mov	r8, r2
 8001668:	4699      	mov	r9, r3
 800166a:	4623      	mov	r3, r4
 800166c:	eb18 0303 	adds.w	r3, r8, r3
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	462b      	mov	r3, r5
 8001674:	eb49 0303 	adc.w	r3, r9, r3
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001686:	4629      	mov	r1, r5
 8001688:	024b      	lsls	r3, r1, #9
 800168a:	4621      	mov	r1, r4
 800168c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001690:	4621      	mov	r1, r4
 8001692:	024a      	lsls	r2, r1, #9
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800169a:	2200      	movs	r2, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
 800169e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016a4:	f7fe fd94 	bl	80001d0 <__aeabi_uldivmod>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4613      	mov	r3, r2
 80016ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b0:	e058      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	2200      	movs	r2, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	4611      	mov	r1, r2
 80016be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016c2:	623b      	str	r3, [r7, #32]
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016cc:	4642      	mov	r2, r8
 80016ce:	464b      	mov	r3, r9
 80016d0:	f04f 0000 	mov.w	r0, #0
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	0159      	lsls	r1, r3, #5
 80016da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016de:	0150      	lsls	r0, r2, #5
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4641      	mov	r1, r8
 80016e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ea:	4649      	mov	r1, r9
 80016ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001700:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001704:	ebb2 040a 	subs.w	r4, r2, sl
 8001708:	eb63 050b 	sbc.w	r5, r3, fp
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	00eb      	lsls	r3, r5, #3
 8001716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800171a:	00e2      	lsls	r2, r4, #3
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	4643      	mov	r3, r8
 8001722:	18e3      	adds	r3, r4, r3
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	464b      	mov	r3, r9
 8001728:	eb45 0303 	adc.w	r3, r5, r3
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9d7 4500 	ldrd	r4, r5, [r7]
 800173a:	4629      	mov	r1, r5
 800173c:	028b      	lsls	r3, r1, #10
 800173e:	4621      	mov	r1, r4
 8001740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001744:	4621      	mov	r1, r4
 8001746:	028a      	lsls	r2, r1, #10
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174e:	2200      	movs	r2, #0
 8001750:	61bb      	str	r3, [r7, #24]
 8001752:	61fa      	str	r2, [r7, #28]
 8001754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001758:	f7fe fd3a 	bl	80001d0 <__aeabi_uldivmod>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4613      	mov	r3, r2
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_RCC_GetSysClockFreq+0x200>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800177e:	e002      	b.n	8001786 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_GetSysClockFreq+0x204>)
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001788:	4618      	mov	r0, r3
 800178a:	3750      	adds	r7, #80	; 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	00f42400 	.word	0x00f42400
 800179c:	007a1200 	.word	0x007a1200

080017a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 0208 	add.w	r2, r3, #8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 0208 	add.w	r2, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 0208 	add.w	r2, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80017fa:	b480      	push	{r7}
 80017fc:	b085      	sub	sp, #20
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d103      	bne.n	800181a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e00c      	b.n	8001834 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3308      	adds	r3, #8
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e002      	b.n	8001828 <vListInsert+0x2e>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	d2f6      	bcs.n	8001822 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6892      	ldr	r2, [r2, #8]
 8001882:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6852      	ldr	r2, [r2, #4]
 800188c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d103      	bne.n	80018a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1e5a      	subs	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80018ca:	2301      	movs	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80018d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018dc:	f383 8811 	msr	BASEPRI, r3
 80018e0:	f3bf 8f6f 	isb	sy
 80018e4:	f3bf 8f4f 	dsb	sy
 80018e8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80018ea:	bf00      	nop
 80018ec:	e7fe      	b.n	80018ec <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05d      	beq.n	80019b0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d059      	beq.n	80019b0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	2100      	movs	r1, #0
 8001906:	fba3 2302 	umull	r2, r3, r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d000      	beq.n	8001910 <xQueueGenericReset+0x50>
 800190e:	2101      	movs	r1, #1
 8001910:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d14c      	bne.n	80019b0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001916:	f001 fe1f 	bl	8003558 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	6939      	ldr	r1, [r7, #16]
 8001924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	441a      	add	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2200      	movs	r2, #0
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	3b01      	subs	r3, #1
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	441a      	add	r2, r3
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	22ff      	movs	r2, #255	; 0xff
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	22ff      	movs	r2, #255	; 0xff
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d114      	bne.n	8001996 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01a      	beq.n	80019aa <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	3310      	adds	r3, #16
 8001978:	4618      	mov	r0, r3
 800197a:	f000 ff8b 	bl	8002894 <xTaskRemoveFromEventList>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d012      	beq.n	80019aa <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <xQueueGenericReset+0x11c>)
 8001986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	e009      	b.n	80019aa <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3310      	adds	r3, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff00 	bl	80017a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3324      	adds	r3, #36	; 0x24
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fefb 	bl	80017a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80019aa:	f001 fe05 	bl	80035b8 <vPortExitCritical>
 80019ae:	e001      	b.n	80019b4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <xQueueGenericReset+0x110>
        __asm volatile
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	60bb      	str	r3, [r7, #8]
    }
 80019cc:	bf00      	nop
 80019ce:	e7fe      	b.n	80019ce <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80019d0:	697b      	ldr	r3, [r7, #20]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000ed04 	.word	0xe000ed04

080019e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	4613      	mov	r3, r2
 80019ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d02e      	beq.n	8001a56 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80019f8:	2100      	movs	r1, #0
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d000      	beq.n	8001a08 <xQueueGenericCreate+0x28>
 8001a06:	2101      	movs	r1, #1
 8001a08:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d123      	bne.n	8001a56 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001a16:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001a1a:	d81c      	bhi.n	8001a56 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	3350      	adds	r3, #80	; 0x50
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fe76 	bl	800371c <pvPortMalloc>
 8001a30:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3350      	adds	r3, #80	; 0x50
 8001a40:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f814 	bl	8001a7c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001a54:	e00d      	b.n	8001a72 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10a      	bne.n	8001a72 <xQueueGenericCreate+0x92>
        __asm volatile
 8001a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	613b      	str	r3, [r7, #16]
    }
 8001a6e:	bf00      	nop
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001a72:	69fb      	ldr	r3, [r7, #28]
    }
 8001a74:	4618      	mov	r0, r3
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e002      	b.n	8001a9e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001aaa:	2101      	movs	r1, #1
 8001aac:	69b8      	ldr	r0, [r7, #24]
 8001aae:	f7ff ff07 	bl	80018c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	; 0x30
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10a      	bne.n	8001af4 <xQueueReceive+0x30>
        __asm volatile
 8001ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae2:	f383 8811 	msr	BASEPRI, r3
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	f3bf 8f4f 	dsb	sy
 8001aee:	623b      	str	r3, [r7, #32]
    }
 8001af0:	bf00      	nop
 8001af2:	e7fe      	b.n	8001af2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <xQueueReceive+0x3e>
 8001afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <xQueueReceive+0x42>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <xQueueReceive+0x44>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <xQueueReceive+0x5e>
        __asm volatile
 8001b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b10:	f383 8811 	msr	BASEPRI, r3
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	f3bf 8f4f 	dsb	sy
 8001b1c:	61fb      	str	r3, [r7, #28]
    }
 8001b1e:	bf00      	nop
 8001b20:	e7fe      	b.n	8001b20 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b22:	f001 f8c7 	bl	8002cb4 <xTaskGetSchedulerState>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <xQueueReceive+0x6e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <xQueueReceive+0x72>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <xQueueReceive+0x74>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <xQueueReceive+0x8e>
        __asm volatile
 8001b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	61bb      	str	r3, [r7, #24]
    }
 8001b4e:	bf00      	nop
 8001b50:	e7fe      	b.n	8001b50 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b52:	f001 fd01 	bl	8003558 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01f      	beq.n	8001ba2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b66:	f000 f88d 	bl	8001c84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00f      	beq.n	8001b9a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	3310      	adds	r3, #16
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fe88 	bl	8002894 <xTaskRemoveFromEventList>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <xQueueReceive+0x1bc>)
 8001b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	f3bf 8f4f 	dsb	sy
 8001b96:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001b9a:	f001 fd0d 	bl	80035b8 <vPortExitCritical>
                return pdPASS;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e069      	b.n	8001c76 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d103      	bne.n	8001bb0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ba8:	f001 fd06 	bl	80035b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e062      	b.n	8001c76 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 ff40 	bl	8002a40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001bc4:	f001 fcf8 	bl	80035b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001bc8:	f000 fb6e 	bl	80022a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001bcc:	f001 fcc4 	bl	8003558 <vPortEnterCritical>
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d103      	bne.n	8001be6 <xQueueReceive+0x122>
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d103      	bne.n	8001bfc <xQueueReceive+0x138>
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bfc:	f001 fcdc 	bl	80035b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c00:	1d3a      	adds	r2, r7, #4
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 ff2f 	bl	8002a6c <xTaskCheckForTimeOut>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d123      	bne.n	8001c5c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c16:	f000 f8ad 	bl	8001d74 <prvIsQueueEmpty>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d017      	beq.n	8001c50 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	3324      	adds	r3, #36	; 0x24
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fdc9 	bl	80027c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c30:	f000 f84e 	bl	8001cd0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001c34:	f000 fb46 	bl	80022c4 <xTaskResumeAll>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d189      	bne.n	8001b52 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <xQueueReceive+0x1bc>)
 8001c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f3bf 8f4f 	dsb	sy
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	e780      	b.n	8001b52 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c52:	f000 f83d 	bl	8001cd0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c56:	f000 fb35 	bl	80022c4 <xTaskResumeAll>
 8001c5a:	e77a      	b.n	8001b52 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c5e:	f000 f837 	bl	8001cd0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c62:	f000 fb2f 	bl	80022c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c68:	f000 f884 	bl	8001d74 <prvIsQueueEmpty>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f43f af6f 	beq.w	8001b52 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001c74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3730      	adds	r7, #48	; 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000ed04 	.word	0xe000ed04

08001c84 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d018      	beq.n	8001cc8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	441a      	add	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d303      	bcc.n	8001cb8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f001 ff4c 	bl	8003b60 <memcpy>
    }
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001cd8:	f001 fc3e 	bl	8003558 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ce4:	e011      	b.n	8001d0a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3324      	adds	r3, #36	; 0x24
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fdce 	bl	8002894 <xTaskRemoveFromEventList>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001cfe:	f000 ff1b 	bl	8002b38 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dce9      	bgt.n	8001ce6 <prvUnlockQueue+0x16>
 8001d12:	e000      	b.n	8001d16 <prvUnlockQueue+0x46>
                        break;
 8001d14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001d1e:	f001 fc4b 	bl	80035b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001d22:	f001 fc19 	bl	8003558 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d2e:	e011      	b.n	8001d54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3310      	adds	r3, #16
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fda9 	bl	8002894 <xTaskRemoveFromEventList>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001d48:	f000 fef6 	bl	8002b38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dce9      	bgt.n	8001d30 <prvUnlockQueue+0x60>
 8001d5c:	e000      	b.n	8001d60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001d5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	22ff      	movs	r2, #255	; 0xff
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001d68:	f001 fc26 	bl	80035b8 <vPortExitCritical>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001d7c:	f001 fbec 	bl	8003558 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e001      	b.n	8001d92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001d92:	f001 fc11 	bl	80035b8 <vPortExitCritical>

    return xReturn;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <vQueueAddToRegistry+0x26>
        __asm volatile
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	60fb      	str	r3, [r7, #12]
    }
 8001dc2:	bf00      	nop
 8001dc4:	e7fe      	b.n	8001dc4 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d024      	beq.n	8001e1a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e01e      	b.n	8001e14 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <vQueueAddToRegistry+0x98>)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d105      	bne.n	8001df2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <vQueueAddToRegistry+0x98>)
 8001dec:	4413      	add	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
                    break;
 8001df0:	e013      	b.n	8001e1a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10a      	bne.n	8001e0e <vQueueAddToRegistry+0x6e>
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <vQueueAddToRegistry+0x98>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <vQueueAddToRegistry+0x98>)
 8001e0a:	4413      	add	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b07      	cmp	r3, #7
 8001e18:	d9dd      	bls.n	8001dd6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20000040 	.word	0x20000040

08001e3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001e4c:	f001 fb84 	bl	8003558 <vPortEnterCritical>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e56:	b25b      	sxtb	r3, r3
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d103      	bne.n	8001e66 <vQueueWaitForMessageRestricted+0x2a>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e72:	d103      	bne.n	8001e7c <vQueueWaitForMessageRestricted+0x40>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7c:	f001 fb9c 	bl	80035b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3324      	adds	r3, #36	; 0x24
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fcb9 	bl	8002808 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff1a 	bl	8001cd0 <prvUnlockQueue>
    }
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af04      	add	r7, sp, #16
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fc2f 	bl	800371c <pvPortMalloc>
 8001ebe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00e      	beq.n	8001ee4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ec6:	2058      	movs	r0, #88	; 0x58
 8001ec8:	f001 fc28 	bl	800371c <pvPortMalloc>
 8001ecc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e005      	b.n	8001ee8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f001 fcfd 	bl	80038dc <vPortFree>
 8001ee2:	e001      	b.n	8001ee8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d013      	beq.n	8001f16 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9303      	str	r3, [sp, #12]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f80e 	bl	8001f26 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001f0a:	69f8      	ldr	r0, [r7, #28]
 8001f0c:	f000 f8b0 	bl	8002070 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e002      	b.n	8001f1c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
    }
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b088      	sub	sp, #32
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	21a5      	movs	r1, #165	; 0xa5
 8001f40:	f001 fe1c 	bl	8003b7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f023 0307 	bic.w	r3, r3, #7
 8001f5c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <prvInitialiseNewTask+0x58>
        __asm volatile
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	617b      	str	r3, [r7, #20]
    }
 8001f7a:	bf00      	nop
 8001f7c:	e7fe      	b.n	8001f7c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01f      	beq.n	8001fc4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e012      	b.n	8001fb0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	4413      	add	r3, r2
 8001f90:	7819      	ldrb	r1, [r3, #0]
 8001f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4413      	add	r3, r2
 8001f98:	3334      	adds	r3, #52	; 0x34
 8001f9a:	460a      	mov	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3301      	adds	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b09      	cmp	r3, #9
 8001fb4:	d9e9      	bls.n	8001f8a <prvInitialiseNewTask+0x64>
 8001fb6:	e000      	b.n	8001fba <prvInitialiseNewTask+0x94>
            {
                break;
 8001fb8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001fc2:	e003      	b.n	8001fcc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d90a      	bls.n	8001fe8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	613b      	str	r3, [r7, #16]
    }
 8001fe4:	bf00      	nop
 8001fe6:	e7fe      	b.n	8001fe6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d901      	bls.n	8001ff2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002000:	2200      	movs	r2, #0
 8002002:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	3304      	adds	r3, #4
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fbe9 	bl	80017e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002010:	3318      	adds	r3, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fbe4 	bl	80017e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800201c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	f1c3 0205 	rsb	r2, r3, #5
 8002024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002026:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002030:	3350      	adds	r3, #80	; 0x50
 8002032:	2204      	movs	r2, #4
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f001 fda0 	bl	8003b7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	3354      	adds	r3, #84	; 0x54
 8002040:	2201      	movs	r2, #1
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fd99 	bl	8003b7c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	68f9      	ldr	r1, [r7, #12]
 800204e:	69b8      	ldr	r0, [r7, #24]
 8002050:	f001 f952 	bl	80032f8 <pxPortInitialiseStack>
 8002054:	4602      	mov	r2, r0
 8002056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002058:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002064:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002078:	f001 fa6e 	bl	8003558 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <prvAddNewTaskToReadyList+0x110>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <prvAddNewTaskToReadyList+0x110>)
 8002084:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <prvAddNewTaskToReadyList+0x114>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <prvAddNewTaskToReadyList+0x114>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <prvAddNewTaskToReadyList+0x110>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d110      	bne.n	80020be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800209c:	f000 fd70 	bl	8002b80 <prvInitialiseTaskLists>
 80020a0:	e00d      	b.n	80020be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <prvAddNewTaskToReadyList+0x118>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80020aa:	4b36      	ldr	r3, [pc, #216]	; (8002184 <prvAddNewTaskToReadyList+0x114>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d802      	bhi.n	80020be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <prvAddNewTaskToReadyList+0x114>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <prvAddNewTaskToReadyList+0x11c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <prvAddNewTaskToReadyList+0x11c>)
 80020c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <prvAddNewTaskToReadyList+0x11c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	2201      	movs	r2, #1
 80020d6:	409a      	lsls	r2, r3
 80020d8:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <prvAddNewTaskToReadyList+0x120>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4313      	orrs	r3, r2
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <prvAddNewTaskToReadyList+0x120>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e6:	492b      	ldr	r1, [pc, #172]	; (8002194 <prvAddNewTaskToReadyList+0x124>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	3204      	adds	r2, #4
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <prvAddNewTaskToReadyList+0x124>)
 8002126:	441a      	add	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	4918      	ldr	r1, [pc, #96]	; (8002194 <prvAddNewTaskToReadyList+0x124>)
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	4814      	ldr	r0, [pc, #80]	; (8002194 <prvAddNewTaskToReadyList+0x124>)
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4403      	add	r3, r0
 800214c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800214e:	f001 fa33 	bl	80035b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <prvAddNewTaskToReadyList+0x118>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00e      	beq.n	8002178 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <prvAddNewTaskToReadyList+0x114>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <prvAddNewTaskToReadyList+0x128>)
 800216a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000158 	.word	0x20000158
 8002184:	20000080 	.word	0x20000080
 8002188:	20000164 	.word	0x20000164
 800218c:	20000174 	.word	0x20000174
 8002190:	20000160 	.word	0x20000160
 8002194:	20000084 	.word	0x20000084
 8002198:	e000ed04 	.word	0xe000ed04

0800219c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d017      	beq.n	80021de <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <vTaskDelay+0x60>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <vTaskDelay+0x30>
        __asm volatile
 80021b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	60bb      	str	r3, [r7, #8]
    }
 80021c8:	bf00      	nop
 80021ca:	e7fe      	b.n	80021ca <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80021cc:	f000 f86c 	bl	80022a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fd8c 	bl	8002cf0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80021d8:	f000 f874 	bl	80022c4 <xTaskResumeAll>
 80021dc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <vTaskDelay+0x64>)
 80021e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000180 	.word	0x20000180
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <vTaskStartScheduler+0x88>)
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	2282      	movs	r2, #130	; 0x82
 8002216:	491e      	ldr	r1, [pc, #120]	; (8002290 <vTaskStartScheduler+0x8c>)
 8002218:	481e      	ldr	r0, [pc, #120]	; (8002294 <vTaskStartScheduler+0x90>)
 800221a:	f7ff fe43 	bl	8001ea4 <xTaskCreate>
 800221e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002226:	f000 fde3 	bl	8002df0 <xTimerCreateTimerTask>
 800222a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d116      	bne.n	8002260 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	60bb      	str	r3, [r7, #8]
    }
 8002244:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <vTaskStartScheduler+0x94>)
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <vTaskStartScheduler+0x98>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <vTaskStartScheduler+0x9c>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800225a:	f001 f8db 	bl	8003414 <xPortStartScheduler>
 800225e:	e00e      	b.n	800227e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d10a      	bne.n	800227e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	607b      	str	r3, [r7, #4]
    }
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <vTaskStartScheduler+0xa0>)
 8002280:	681b      	ldr	r3, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000017c 	.word	0x2000017c
 8002290:	08003bb0 	.word	0x08003bb0
 8002294:	08002b51 	.word	0x08002b51
 8002298:	20000178 	.word	0x20000178
 800229c:	20000164 	.word	0x20000164
 80022a0:	2000015c 	.word	0x2000015c
 80022a4:	2000000c 	.word	0x2000000c

080022a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <vTaskSuspendAll+0x18>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <vTaskSuspendAll+0x18>)
 80022b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000180 	.word	0x20000180

080022c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80022d2:	4b71      	ldr	r3, [pc, #452]	; (8002498 <xTaskResumeAll+0x1d4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <xTaskResumeAll+0x2c>
        __asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	607b      	str	r3, [r7, #4]
    }
 80022ec:	bf00      	nop
 80022ee:	e7fe      	b.n	80022ee <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80022f0:	f001 f932 	bl	8003558 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <xTaskResumeAll+0x1d4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	4a67      	ldr	r2, [pc, #412]	; (8002498 <xTaskResumeAll+0x1d4>)
 80022fc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022fe:	4b66      	ldr	r3, [pc, #408]	; (8002498 <xTaskResumeAll+0x1d4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c0 	bne.w	8002488 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002308:	4b64      	ldr	r3, [pc, #400]	; (800249c <xTaskResumeAll+0x1d8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80bb 	beq.w	8002488 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002312:	e08a      	b.n	800242a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <xTaskResumeAll+0x1dc>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	6a12      	ldr	r2, [r2, #32]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	69d2      	ldr	r2, [r2, #28]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3318      	adds	r3, #24
 800233e:	429a      	cmp	r2, r3
 8002340:	d103      	bne.n	800234a <xTaskResumeAll+0x86>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	68d2      	ldr	r2, [r2, #12]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	6892      	ldr	r2, [r2, #8]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3304      	adds	r3, #4
 800237c:	429a      	cmp	r2, r3
 800237e:	d103      	bne.n	8002388 <xTaskResumeAll+0xc4>
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	4b40      	ldr	r3, [pc, #256]	; (80024a4 <xTaskResumeAll+0x1e0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	4a3f      	ldr	r2, [pc, #252]	; (80024a4 <xTaskResumeAll+0x1e0>)
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ae:	493e      	ldr	r1, [pc, #248]	; (80024a8 <xTaskResumeAll+0x1e4>)
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3304      	adds	r3, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	3204      	adds	r2, #4
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <xTaskResumeAll+0x1e4>)
 80023ee:	441a      	add	r2, r3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	492b      	ldr	r1, [pc, #172]	; (80024a8 <xTaskResumeAll+0x1e4>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	1c59      	adds	r1, r3, #1
 8002408:	4827      	ldr	r0, [pc, #156]	; (80024a8 <xTaskResumeAll+0x1e4>)
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4403      	add	r3, r0
 8002414:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <xTaskResumeAll+0x1e8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <xTaskResumeAll+0x1ec>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <xTaskResumeAll+0x1dc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f47f af70 	bne.w	8002314 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800243a:	f000 fc1f 	bl	8002c7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <xTaskResumeAll+0x1f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800244a:	f000 f847 	bl	80024dc <xTaskIncrementTick>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <xTaskResumeAll+0x1ec>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3b01      	subs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f1      	bne.n	800244a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <xTaskResumeAll+0x1f0>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <xTaskResumeAll+0x1ec>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d009      	beq.n	8002488 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <xTaskResumeAll+0x1f4>)
 800247a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002488:	f001 f896 	bl	80035b8 <vPortExitCritical>

    return xAlreadyYielded;
 800248c:	69bb      	ldr	r3, [r7, #24]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000180 	.word	0x20000180
 800249c:	20000158 	.word	0x20000158
 80024a0:	20000118 	.word	0x20000118
 80024a4:	20000160 	.word	0x20000160
 80024a8:	20000084 	.word	0x20000084
 80024ac:	20000080 	.word	0x20000080
 80024b0:	2000016c 	.word	0x2000016c
 80024b4:	20000168 	.word	0x20000168
 80024b8:	e000ed04 	.word	0xe000ed04

080024bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <xTaskGetTickCount+0x1c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80024c8:	687b      	ldr	r3, [r7, #4]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000015c 	.word	0x2000015c

080024dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e6:	4b7d      	ldr	r3, [pc, #500]	; (80026dc <xTaskIncrementTick+0x200>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 80ec 	bne.w	80026c8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80024f0:	4b7b      	ldr	r3, [pc, #492]	; (80026e0 <xTaskIncrementTick+0x204>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80024f8:	4a79      	ldr	r2, [pc, #484]	; (80026e0 <xTaskIncrementTick+0x204>)
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d120      	bne.n	8002546 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <xTaskIncrementTick+0x208>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <xTaskIncrementTick+0x48>
        __asm volatile
 800250e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	607b      	str	r3, [r7, #4]
    }
 8002520:	bf00      	nop
 8002522:	e7fe      	b.n	8002522 <xTaskIncrementTick+0x46>
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <xTaskIncrementTick+0x208>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <xTaskIncrementTick+0x20c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <xTaskIncrementTick+0x208>)
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <xTaskIncrementTick+0x20c>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <xTaskIncrementTick+0x210>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <xTaskIncrementTick+0x210>)
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	f000 fb9b 	bl	8002c7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <xTaskIncrementTick+0x214>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a3a      	ldr	r2, [r7, #32]
 800254c:	429a      	cmp	r2, r3
 800254e:	f0c0 80a6 	bcc.w	800269e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002552:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <xTaskIncrementTick+0x208>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800255c:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <xTaskIncrementTick+0x214>)
 800255e:	f04f 32ff 	mov.w	r2, #4294967295
 8002562:	601a      	str	r2, [r3, #0]
                    break;
 8002564:	e09b      	b.n	800269e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002566:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <xTaskIncrementTick+0x208>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002576:	6a3a      	ldr	r2, [r7, #32]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	429a      	cmp	r2, r3
 800257c:	d203      	bcs.n	8002586 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800257e:	4a5c      	ldr	r2, [pc, #368]	; (80026f0 <xTaskIncrementTick+0x214>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002584:	e08b      	b.n	800269e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	68d2      	ldr	r2, [r2, #12]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	3304      	adds	r3, #4
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d103      	bne.n	80025b4 <xTaskIncrementTick+0xd8>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	1e5a      	subs	r2, r3, #1
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01e      	beq.n	800260a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	6a12      	ldr	r2, [r2, #32]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	69d2      	ldr	r2, [r2, #28]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	3318      	adds	r3, #24
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d103      	bne.n	80025fa <xTaskIncrementTick+0x11e>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2200      	movs	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	2201      	movs	r2, #1
 8002610:	409a      	lsls	r2, r3
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <xTaskIncrementTick+0x218>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	4a36      	ldr	r2, [pc, #216]	; (80026f4 <xTaskIncrementTick+0x218>)
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <xTaskIncrementTick+0x21c>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3304      	adds	r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	3204      	adds	r2, #4
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <xTaskIncrementTick+0x21c>)
 8002660:	441a      	add	r2, r3
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	615a      	str	r2, [r3, #20]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	4923      	ldr	r1, [pc, #140]	; (80026f8 <xTaskIncrementTick+0x21c>)
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	481f      	ldr	r0, [pc, #124]	; (80026f8 <xTaskIncrementTick+0x21c>)
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4403      	add	r3, r0
 8002686:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <xTaskIncrementTick+0x220>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	429a      	cmp	r2, r3
 8002694:	f4ff af5d 	bcc.w	8002552 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800269c:	e759      	b.n	8002552 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <xTaskIncrementTick+0x220>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4914      	ldr	r1, [pc, #80]	; (80026f8 <xTaskIncrementTick+0x21c>)
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d901      	bls.n	80026ba <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <xTaskIncrementTick+0x224>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	e004      	b.n	80026d2 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <xTaskIncrementTick+0x228>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <xTaskIncrementTick+0x228>)
 80026d0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000180 	.word	0x20000180
 80026e0:	2000015c 	.word	0x2000015c
 80026e4:	20000110 	.word	0x20000110
 80026e8:	20000114 	.word	0x20000114
 80026ec:	20000170 	.word	0x20000170
 80026f0:	20000178 	.word	0x20000178
 80026f4:	20000160 	.word	0x20000160
 80026f8:	20000084 	.word	0x20000084
 80026fc:	20000080 	.word	0x20000080
 8002700:	2000016c 	.word	0x2000016c
 8002704:	20000168 	.word	0x20000168

08002708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <vTaskSwitchContext+0xa4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <vTaskSwitchContext+0xa8>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800271c:	e03f      	b.n	800279e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <vTaskSwitchContext+0xa8>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <vTaskSwitchContext+0xac>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f1c3 031f 	rsb	r3, r3, #31
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	491f      	ldr	r1, [pc, #124]	; (80027b8 <vTaskSwitchContext+0xb0>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <vTaskSwitchContext+0x5c>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	607b      	str	r3, [r7, #4]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <vTaskSwitchContext+0x5a>
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <vTaskSwitchContext+0xb0>)
 8002770:	4413      	add	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3308      	adds	r3, #8
 8002786:	429a      	cmp	r2, r3
 8002788:	d104      	bne.n	8002794 <vTaskSwitchContext+0x8c>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <vTaskSwitchContext+0xb4>)
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000180 	.word	0x20000180
 80027b0:	2000016c 	.word	0x2000016c
 80027b4:	20000160 	.word	0x20000160
 80027b8:	20000084 	.word	0x20000084
 80027bc:	20000080 	.word	0x20000080

080027c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	60fb      	str	r3, [r7, #12]
    }
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <vTaskPlaceOnEventList+0x44>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3318      	adds	r3, #24
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff f803 	bl	80017fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027f4:	2101      	movs	r1, #1
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f000 fa7a 	bl	8002cf0 <prvAddCurrentTaskToDelayedList>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000080 	.word	0x20000080

08002808 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	613b      	str	r3, [r7, #16]
    }
 800282c:	bf00      	nop
 800282e:	e7fe      	b.n	800282e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <vTaskPlaceOnEventListRestricted+0x88>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	61da      	str	r2, [r3, #28]
 800283e:	4b14      	ldr	r3, [pc, #80]	; (8002890 <vTaskPlaceOnEventListRestricted+0x88>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6892      	ldr	r2, [r2, #8]
 8002846:	621a      	str	r2, [r3, #32]
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <vTaskPlaceOnEventListRestricted+0x88>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	3218      	adds	r2, #24
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <vTaskPlaceOnEventListRestricted+0x88>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f103 0218 	add.w	r2, r3, #24
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <vTaskPlaceOnEventListRestricted+0x88>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68b8      	ldr	r0, [r7, #8]
 8002882:	f000 fa35 	bl	8002cf0 <prvAddCurrentTaskToDelayedList>
    }
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000080 	.word	0x20000080

08002894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	60fb      	str	r3, [r7, #12]
    }
 80028bc:	bf00      	nop
 80028be:	e7fe      	b.n	80028be <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	6a12      	ldr	r2, [r2, #32]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	69d2      	ldr	r2, [r2, #28]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	3318      	adds	r3, #24
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d103      	bne.n	80028ee <xTaskRemoveFromEventList+0x5a>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	6a1a      	ldr	r2, [r3, #32]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2200      	movs	r2, #0
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028fe:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <xTaskRemoveFromEventList+0x194>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d15e      	bne.n	80029c4 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	68d2      	ldr	r2, [r2, #12]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	6a3a      	ldr	r2, [r7, #32]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	3304      	adds	r3, #4
 8002928:	429a      	cmp	r2, r3
 800292a:	d103      	bne.n	8002934 <xTaskRemoveFromEventList+0xa0>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <xTaskRemoveFromEventList+0x198>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	4a36      	ldr	r2, [pc, #216]	; (8002a2c <xTaskRemoveFromEventList+0x198>)
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295a:	4935      	ldr	r1, [pc, #212]	; (8002a30 <xTaskRemoveFromEventList+0x19c>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3304      	adds	r3, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	3204      	adds	r2, #4
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	1d1a      	adds	r2, r3, #4
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <xTaskRemoveFromEventList+0x19c>)
 800299a:	441a      	add	r2, r3
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	615a      	str	r2, [r3, #20]
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a4:	4922      	ldr	r1, [pc, #136]	; (8002a30 <xTaskRemoveFromEventList+0x19c>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	481e      	ldr	r0, [pc, #120]	; (8002a30 <xTaskRemoveFromEventList+0x19c>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	6019      	str	r1, [r3, #0]
 80029c2:	e01b      	b.n	80029fc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <xTaskRemoveFromEventList+0x1a0>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	61da      	str	r2, [r3, #28]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	621a      	str	r2, [r3, #32]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	3218      	adds	r2, #24
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f103 0218 	add.w	r2, r3, #24
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <xTaskRemoveFromEventList+0x1a0>)
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <xTaskRemoveFromEventList+0x1a0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <xTaskRemoveFromEventList+0x1a0>)
 80029fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <xTaskRemoveFromEventList+0x1a4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d905      	bls.n	8002a16 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <xTaskRemoveFromEventList+0x1a8>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e001      	b.n	8002a1a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	372c      	adds	r7, #44	; 0x2c
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	20000180 	.word	0x20000180
 8002a2c:	20000160 	.word	0x20000160
 8002a30:	20000084 	.word	0x20000084
 8002a34:	20000118 	.word	0x20000118
 8002a38:	20000080 	.word	0x20000080
 8002a3c:	2000016c 	.word	0x2000016c

08002a40 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <vTaskInternalSetTimeOutState+0x24>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <vTaskInternalSetTimeOutState+0x28>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	605a      	str	r2, [r3, #4]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	20000170 	.word	0x20000170
 8002a68:	2000015c 	.word	0x2000015c

08002a6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	613b      	str	r3, [r7, #16]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	60fb      	str	r3, [r7, #12]
    }
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002aae:	f000 fd53 	bl	8003558 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <xTaskCheckForTimeOut+0xc4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aca:	d102      	bne.n	8002ad2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e026      	b.n	8002b20 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <xTaskCheckForTimeOut+0xc8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d00a      	beq.n	8002af4 <xTaskCheckForTimeOut+0x88>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d305      	bcc.n	8002af4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e015      	b.n	8002b20 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20b      	bcs.n	8002b16 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad2      	subs	r2, r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff98 	bl	8002a40 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	e004      	b.n	8002b20 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002b20:	f000 fd4a 	bl	80035b8 <vPortExitCritical>

    return xReturn;
 8002b24:	69fb      	ldr	r3, [r7, #28]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2000015c 	.word	0x2000015c
 8002b34:	20000170 	.word	0x20000170

08002b38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <vTaskMissedYield+0x14>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	2000016c 	.word	0x2000016c

08002b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b58:	f000 f852 	bl	8002c00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <prvIdleTask+0x28>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d9f9      	bls.n	8002b58 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <prvIdleTask+0x2c>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b74:	e7f0      	b.n	8002b58 <prvIdleTask+0x8>
 8002b76:	bf00      	nop
 8002b78:	20000084 	.word	0x20000084
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	e00c      	b.n	8002ba6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <prvInitialiseTaskLists+0x60>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fe00 	bl	80017a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d9ef      	bls.n	8002b8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <prvInitialiseTaskLists+0x64>)
 8002bae:	f7fe fdf7 	bl	80017a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bb2:	480d      	ldr	r0, [pc, #52]	; (8002be8 <prvInitialiseTaskLists+0x68>)
 8002bb4:	f7fe fdf4 	bl	80017a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <prvInitialiseTaskLists+0x6c>)
 8002bba:	f7fe fdf1 	bl	80017a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <prvInitialiseTaskLists+0x70>)
 8002bc0:	f7fe fdee 	bl	80017a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <prvInitialiseTaskLists+0x74>)
 8002bc6:	f7fe fdeb 	bl	80017a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <prvInitialiseTaskLists+0x78>)
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <prvInitialiseTaskLists+0x64>)
 8002bce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <prvInitialiseTaskLists+0x7c>)
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <prvInitialiseTaskLists+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000084 	.word	0x20000084
 8002be4:	200000e8 	.word	0x200000e8
 8002be8:	200000fc 	.word	0x200000fc
 8002bec:	20000118 	.word	0x20000118
 8002bf0:	2000012c 	.word	0x2000012c
 8002bf4:	20000144 	.word	0x20000144
 8002bf8:	20000110 	.word	0x20000110
 8002bfc:	20000114 	.word	0x20000114

08002c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c06:	e019      	b.n	8002c3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c08:	f000 fca6 	bl	8003558 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <prvCheckTasksWaitingTermination+0x50>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fe27 	bl	800186c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <prvCheckTasksWaitingTermination+0x54>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <prvCheckTasksWaitingTermination+0x54>)
 8002c26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c32:	f000 fcc1 	bl	80035b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f810 	bl	8002c5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e1      	bne.n	8002c08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000012c 	.word	0x2000012c
 8002c54:	20000158 	.word	0x20000158
 8002c58:	20000140 	.word	0x20000140

08002c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fe37 	bl	80038dc <vPortFree>
                vPortFree( pxTCB );
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fe34 	bl	80038dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <prvResetNextTaskUnblockTime+0x30>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <prvResetNextTaskUnblockTime+0x34>)
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c92:	e005      	b.n	8002ca0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <prvResetNextTaskUnblockTime+0x30>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <prvResetNextTaskUnblockTime+0x34>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000110 	.word	0x20000110
 8002cb0:	20000178 	.word	0x20000178

08002cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <xTaskGetSchedulerState+0x34>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	e008      	b.n	8002cda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <xTaskGetSchedulerState+0x38>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	e001      	b.n	8002cda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002cda:	687b      	ldr	r3, [r7, #4]
    }
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	20000164 	.word	0x20000164
 8002cec:	20000180 	.word	0x20000180

08002cf0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fdb0 	bl	800186c <uxListRemove>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2201      	movs	r2, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xec>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4013      	ands	r3, r2
 8002d26:	4a2d      	ldr	r2, [pc, #180]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xec>)
 8002d28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d124      	bne.n	8002d7c <prvAddCurrentTaskToDelayedList+0x8c>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d021      	beq.n	8002d7c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	4b26      	ldr	r3, [pc, #152]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	3204      	adds	r2, #4
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	1d1a      	adds	r2, r3, #4
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d7a:	e026      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d209      	bcs.n	8002da8 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fd2a 	bl	80017fa <vListInsert>
}
 8002da6:	e010      	b.n	8002dca <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7fe fd20 	bl	80017fa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <prvAddCurrentTaskToDelayedList+0xfc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d202      	bcs.n	8002dca <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002dc4:	4a09      	ldr	r2, [pc, #36]	; (8002dec <prvAddCurrentTaskToDelayedList+0xfc>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6013      	str	r3, [r2, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000015c 	.word	0x2000015c
 8002dd8:	20000080 	.word	0x20000080
 8002ddc:	20000160 	.word	0x20000160
 8002de0:	20000144 	.word	0x20000144
 8002de4:	20000114 	.word	0x20000114
 8002de8:	20000110 	.word	0x20000110
 8002dec:	20000178 	.word	0x20000178

08002df0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002dfa:	f000 fa47 	bl	800328c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <xTimerCreateTimerTask+0x54>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <xTimerCreateTimerTask+0x58>)
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e14:	490d      	ldr	r1, [pc, #52]	; (8002e4c <xTimerCreateTimerTask+0x5c>)
 8002e16:	480e      	ldr	r0, [pc, #56]	; (8002e50 <xTimerCreateTimerTask+0x60>)
 8002e18:	f7ff f844 	bl	8001ea4 <xTaskCreate>
 8002e1c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	603b      	str	r3, [r7, #0]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002e3a:	687b      	ldr	r3, [r7, #4]
    }
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200001b4 	.word	0x200001b4
 8002e48:	200001b8 	.word	0x200001b8
 8002e4c:	08003bb8 	.word	0x08003bb8
 8002e50:	08002ef9 	.word	0x08002ef9

08002e54 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002e60:	e008      	b.n	8002e74 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	4413      	add	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	18d1      	adds	r1, r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f8dd 	bl	8003040 <prvInsertTimerInActiveList>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1ea      	bne.n	8002e62 <prvReloadTimer+0xe>
        }
    }
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <prvProcessExpiredTimer+0x5c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fcdb 	bl	800186c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d005      	beq.n	8002ed0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff ffc3 	bl	8002e54 <prvReloadTimer>
 8002ece:	e008      	b.n	8002ee2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	4798      	blx	r3
    }
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200001ac 	.word	0x200001ac

08002ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f857 	bl	8002fb8 <prvGetNextExpireTime>
 8002f0a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f803 	bl	8002f1c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002f16:	f000 f8d5 	bl	80030c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f1a:	e7f1      	b.n	8002f00 <prvTimerTask+0x8>

08002f1c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002f26:	f7ff f9bf 	bl	80022a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f866 	bl	8003000 <prvSampleTimeNow>
 8002f34:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d130      	bne.n	8002f9e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <prvProcessTimerOrBlockTask+0x3c>
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d806      	bhi.n	8002f58 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002f4a:	f7ff f9bb 	bl	80022c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffa1 	bl	8002e98 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002f56:	e024      	b.n	8002fa2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <prvProcessTimerOrBlockTask+0x90>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <prvProcessTimerOrBlockTask+0x50>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <prvProcessTimerOrBlockTask+0x52>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <prvProcessTimerOrBlockTask+0x94>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fe ff5d 	bl	8001e3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002f82:	f7ff f99f 	bl	80022c4 <xTaskResumeAll>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <prvProcessTimerOrBlockTask+0x98>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
    }
 8002f9c:	e001      	b.n	8002fa2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002f9e:	f7ff f991 	bl	80022c4 <xTaskResumeAll>
    }
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001b0 	.word	0x200001b0
 8002fb0:	200001b4 	.word	0x200001b4
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <prvGetNextExpireTime+0x44>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <prvGetNextExpireTime+0x16>
 8002fca:	2201      	movs	r2, #1
 8002fcc:	e000      	b.n	8002fd0 <prvGetNextExpireTime+0x18>
 8002fce:	2200      	movs	r2, #0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <prvGetNextExpireTime+0x44>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e001      	b.n	8002fec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002fec:	68fb      	ldr	r3, [r7, #12]
    }
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	200001ac 	.word	0x200001ac

08003000 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003008:	f7ff fa58 	bl	80024bc <xTaskGetTickCount>
 800300c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <prvSampleTimeNow+0x3c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d205      	bcs.n	8003024 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003018:	f000 f912 	bl	8003240 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e002      	b.n	800302a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <prvSampleTimeNow+0x3c>)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003030:	68fb      	ldr	r3, [r7, #12]
    }
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200001bc 	.word	0x200001bc

08003040 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d812      	bhi.n	800308c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	429a      	cmp	r2, r3
 8003072:	d302      	bcc.n	800307a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003074:	2301      	movs	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	e01b      	b.n	80030b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <prvInsertTimerInActiveList+0x7c>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3304      	adds	r3, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7fe fbb8 	bl	80017fa <vListInsert>
 800308a:	e012      	b.n	80030b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d206      	bcs.n	80030a2 <prvInsertTimerInActiveList+0x62>
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d302      	bcc.n	80030a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e007      	b.n	80030b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <prvInsertTimerInActiveList+0x80>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	4610      	mov	r0, r2
 80030ae:	f7fe fba4 	bl	80017fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 80030b2:	697b      	ldr	r3, [r7, #20]
    }
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	200001b0 	.word	0x200001b0
 80030c0:	200001ac 	.word	0x200001ac

080030c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80030ca:	e0a6      	b.n	800321a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f2c0 80a2 	blt.w	8003218 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d004      	beq.n	80030ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe fbc1 	bl	800186c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff87 	bl	8003000 <prvSampleTimeNow>
 80030f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	f200 808e 	bhi.w	800321a <prvProcessReceivedCommands+0x156>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <prvProcessReceivedCommands+0x40>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003129 	.word	0x08003129
 8003108:	08003129 	.word	0x08003129
 800310c:	08003191 	.word	0x08003191
 8003110:	080031a5 	.word	0x080031a5
 8003114:	080031ef 	.word	0x080031ef
 8003118:	08003129 	.word	0x08003129
 800311c:	08003129 	.word	0x08003129
 8003120:	08003191 	.word	0x08003191
 8003124:	080031a5 	.word	0x080031a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b2da      	uxtb	r2, r3
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	18d1      	adds	r1, r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	69f8      	ldr	r0, [r7, #28]
 8003148:	f7ff ff7a 	bl	8003040 <prvInsertTimerInActiveList>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d063      	beq.n	800321a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	4413      	add	r3, r2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4619      	mov	r1, r3
 800316c:	69f8      	ldr	r0, [r7, #28]
 800316e:	f7ff fe71 	bl	8002e54 <prvReloadTimer>
 8003172:	e008      	b.n	8003186 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	69f8      	ldr	r0, [r7, #28]
 800318c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800318e:	e044      	b.n	800321a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80031a2:	e03a      	b.n	800321a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <prvProcessReceivedCommands+0x116>
        __asm volatile
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	617b      	str	r3, [r7, #20]
    }
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	18d1      	adds	r1, r2, r3
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	69f8      	ldr	r0, [r7, #28]
 80031e8:	f7ff ff2a 	bl	8003040 <prvInsertTimerInActiveList>
                        break;
 80031ec:	e015      	b.n	800321a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80031fc:	69f8      	ldr	r0, [r7, #28]
 80031fe:	f000 fb6d 	bl	80038dc <vPortFree>
 8003202:	e00a      	b.n	800321a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003216:	e000      	b.n	800321a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003218:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <prvProcessReceivedCommands+0x178>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f107 0108 	add.w	r1, r7, #8
 8003222:	2200      	movs	r2, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fc4d 	bl	8001ac4 <xQueueReceive>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f af4d 	bne.w	80030cc <prvProcessReceivedCommands+0x8>
        }
    }
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200001b4 	.word	0x200001b4

08003240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003246:	e009      	b.n	800325c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <prvSwitchTimerLists+0x44>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003252:	f04f 31ff 	mov.w	r1, #4294967295
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f7ff fe1e 	bl	8002e98 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <prvSwitchTimerLists+0x44>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003266:	4b07      	ldr	r3, [pc, #28]	; (8003284 <prvSwitchTimerLists+0x44>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <prvSwitchTimerLists+0x48>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <prvSwitchTimerLists+0x44>)
 8003272:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <prvSwitchTimerLists+0x48>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6013      	str	r3, [r2, #0]
    }
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200001ac 	.word	0x200001ac
 8003288:	200001b0 	.word	0x200001b0

0800328c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003290:	f000 f962 	bl	8003558 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <prvCheckForValidListAndQueue+0x54>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d11d      	bne.n	80032d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800329c:	4811      	ldr	r0, [pc, #68]	; (80032e4 <prvCheckForValidListAndQueue+0x58>)
 800329e:	f7fe fa7f 	bl	80017a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80032a2:	4811      	ldr	r0, [pc, #68]	; (80032e8 <prvCheckForValidListAndQueue+0x5c>)
 80032a4:	f7fe fa7c 	bl	80017a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <prvCheckForValidListAndQueue+0x60>)
 80032aa:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <prvCheckForValidListAndQueue+0x58>)
 80032ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <prvCheckForValidListAndQueue+0x64>)
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <prvCheckForValidListAndQueue+0x5c>)
 80032b2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80032b4:	2200      	movs	r2, #0
 80032b6:	210c      	movs	r1, #12
 80032b8:	200a      	movs	r0, #10
 80032ba:	f7fe fb91 	bl	80019e0 <xQueueGenericCreate>
 80032be:	4603      	mov	r3, r0
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <prvCheckForValidListAndQueue+0x54>)
 80032c2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <prvCheckForValidListAndQueue+0x54>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <prvCheckForValidListAndQueue+0x54>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4908      	ldr	r1, [pc, #32]	; (80032f4 <prvCheckForValidListAndQueue+0x68>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fd64 	bl	8001da0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80032d8:	f000 f96e 	bl	80035b8 <vPortExitCritical>
    }
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200001b4 	.word	0x200001b4
 80032e4:	20000184 	.word	0x20000184
 80032e8:	20000198 	.word	0x20000198
 80032ec:	200001ac 	.word	0x200001ac
 80032f0:	200001b0 	.word	0x200001b0
 80032f4:	08003bc0 	.word	0x08003bc0

080032f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3b04      	subs	r3, #4
 8003308:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003310:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3b04      	subs	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f023 0201 	bic.w	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3b04      	subs	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003328:	4a0c      	ldr	r2, [pc, #48]	; (800335c <pxPortInitialiseStack+0x64>)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b14      	subs	r3, #20
 8003332:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b04      	subs	r3, #4
 800333e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f06f 0202 	mvn.w	r2, #2
 8003346:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3b20      	subs	r3, #32
 800334c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800334e:	68fb      	ldr	r3, [r7, #12]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	08003361 	.word	0x08003361

08003360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <prvTaskExitError+0x54>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d00a      	beq.n	800338a <prvTaskExitError+0x2a>
        __asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	60fb      	str	r3, [r7, #12]
    }
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <prvTaskExitError+0x28>
        __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60bb      	str	r3, [r7, #8]
    }
 800339c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800339e:	bf00      	nop
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0fc      	beq.n	80033a0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20000010 	.word	0x20000010
	...

080033c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <pxCurrentTCBConst2>)
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	6808      	ldr	r0, [r1, #0]
 80033c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ca:	f380 8809 	msr	PSP, r0
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f380 8811 	msr	BASEPRI, r0
 80033da:	4770      	bx	lr
 80033dc:	f3af 8000 	nop.w

080033e0 <pxCurrentTCBConst2>:
 80033e0:	20000080 	.word	0x20000080
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop

080033e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80033e8:	4808      	ldr	r0, [pc, #32]	; (800340c <prvPortStartFirstTask+0x24>)
 80033ea:	6800      	ldr	r0, [r0, #0]
 80033ec:	6800      	ldr	r0, [r0, #0]
 80033ee:	f380 8808 	msr	MSP, r0
 80033f2:	f04f 0000 	mov.w	r0, #0
 80033f6:	f380 8814 	msr	CONTROL, r0
 80033fa:	b662      	cpsie	i
 80033fc:	b661      	cpsie	f
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	df00      	svc	0
 8003408:	bf00      	nop
 800340a:	0000      	.short	0x0000
 800340c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop

08003414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <xPortStartScheduler+0x120>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a46      	ldr	r2, [pc, #280]	; (8003538 <xPortStartScheduler+0x124>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d10a      	bne.n	800343a <xPortStartScheduler+0x26>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	613b      	str	r3, [r7, #16]
    }
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800343a:	4b3e      	ldr	r3, [pc, #248]	; (8003534 <xPortStartScheduler+0x120>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3f      	ldr	r2, [pc, #252]	; (800353c <xPortStartScheduler+0x128>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10a      	bne.n	800345a <xPortStartScheduler+0x46>
        __asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60fb      	str	r3, [r7, #12]
    }
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <xPortStartScheduler+0x12c>)
 800345c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <xPortStartScheduler+0x130>)
 8003480:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <xPortStartScheduler+0x134>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003488:	e009      	b.n	800349e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <xPortStartScheduler+0x134>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3b01      	subs	r3, #1
 8003490:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <xPortStartScheduler+0x134>)
 8003492:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b80      	cmp	r3, #128	; 0x80
 80034a8:	d0ef      	beq.n	800348a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034aa:	4b27      	ldr	r3, [pc, #156]	; (8003548 <xPortStartScheduler+0x134>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d00a      	beq.n	80034cc <xPortStartScheduler+0xb8>
        __asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60bb      	str	r3, [r7, #8]
    }
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <xPortStartScheduler+0x134>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <xPortStartScheduler+0x134>)
 80034d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <xPortStartScheduler+0x134>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034de:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <xPortStartScheduler+0x134>)
 80034e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80034ea:	4b18      	ldr	r3, [pc, #96]	; (800354c <xPortStartScheduler+0x138>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <xPortStartScheduler+0x138>)
 80034f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <xPortStartScheduler+0x138>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a14      	ldr	r2, [pc, #80]	; (800354c <xPortStartScheduler+0x138>)
 80034fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003500:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003502:	f000 f8db 	bl	80036bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <xPortStartScheduler+0x13c>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800350c:	f000 f8fa 	bl	8003704 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <xPortStartScheduler+0x140>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <xPortStartScheduler+0x140>)
 8003516:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800351c:	f7ff ff64 	bl	80033e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003520:	f7ff f8f2 	bl	8002708 <vTaskSwitchContext>
    prvTaskExitError();
 8003524:	f7ff ff1c 	bl	8003360 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00
 8003538:	410fc271 	.word	0x410fc271
 800353c:	410fc270 	.word	0x410fc270
 8003540:	e000e400 	.word	0xe000e400
 8003544:	200001c0 	.word	0x200001c0
 8003548:	200001c4 	.word	0x200001c4
 800354c:	e000ed20 	.word	0xe000ed20
 8003550:	20000010 	.word	0x20000010
 8003554:	e000ef34 	.word	0xe000ef34

08003558 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
        __asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	607b      	str	r3, [r7, #4]
    }
 8003570:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003572:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <vPortEnterCritical+0x58>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3301      	adds	r3, #1
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <vPortEnterCritical+0x58>)
 800357a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <vPortEnterCritical+0x58>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10f      	bne.n	80035a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <vPortEnterCritical+0x5c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	603b      	str	r3, [r7, #0]
    }
 80035a0:	bf00      	nop
 80035a2:	e7fe      	b.n	80035a2 <vPortEnterCritical+0x4a>
    }
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	20000010 	.word	0x20000010
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <vPortExitCritical+0x50>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <vPortExitCritical+0x24>
        __asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	607b      	str	r3, [r7, #4]
    }
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <vPortExitCritical+0x50>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <vPortExitCritical+0x50>)
 80035e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <vPortExitCritical+0x50>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <vPortExitCritical+0x42>
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80035f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000010 	.word	0x20000010
 800360c:	00000000 	.word	0x00000000

08003610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003610:	f3ef 8009 	mrs	r0, PSP
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <pxCurrentTCBConst>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f01e 0f10 	tst.w	lr, #16
 8003620:	bf08      	it	eq
 8003622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800362a:	6010      	str	r0, [r2, #0]
 800362c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003634:	f380 8811 	msr	BASEPRI, r0
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f7ff f862 	bl	8002708 <vTaskSwitchContext>
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f380 8811 	msr	BASEPRI, r0
 800364c:	bc09      	pop	{r0, r3}
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	6808      	ldr	r0, [r1, #0]
 8003652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003656:	f01e 0f10 	tst.w	lr, #16
 800365a:	bf08      	it	eq
 800365c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003660:	f380 8809 	msr	PSP, r0
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	f3af 8000 	nop.w

08003670 <pxCurrentTCBConst>:
 8003670:	20000080 	.word	0x20000080
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop

08003678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
    }
 8003690:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003692:	f7fe ff23 	bl	80024dc <xTaskIncrementTick>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <SysTick_Handler+0x40>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	2300      	movs	r3, #0
 80036a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f383 8811 	msr	BASEPRI, r3
    }
 80036ae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <vPortSetupTimerInterrupt+0x38>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <vPortSetupTimerInterrupt+0x3c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <vPortSetupTimerInterrupt+0x40>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <vPortSetupTimerInterrupt+0x44>)
 80036da:	3b01      	subs	r3, #1
 80036dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036de:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <vPortSetupTimerInterrupt+0x34>)
 80036e0:	2207      	movs	r2, #7
 80036e2:	601a      	str	r2, [r3, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e010 	.word	0xe000e010
 80036f4:	e000e018 	.word	0xe000e018
 80036f8:	20000000 	.word	0x20000000
 80036fc:	10624dd3 	.word	0x10624dd3
 8003700:	e000e014 	.word	0xe000e014

08003704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003714 <vPortEnableVFP+0x10>
 8003708:	6801      	ldr	r1, [r0, #0]
 800370a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800370e:	6001      	str	r1, [r0, #0]
 8003710:	4770      	bx	lr
 8003712:	0000      	.short	0x0000
 8003714:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop

0800371c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003728:	f7fe fdbe 	bl	80022a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800372c:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <pvPortMalloc+0x1a8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003734:	f000 f934 	bl	80039a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003738:	4b63      	ldr	r3, [pc, #396]	; (80038c8 <pvPortMalloc+0x1ac>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 80a7 	bne.w	8003894 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d02d      	beq.n	80037a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800374c:	2208      	movs	r2, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d227      	bcs.n	80037a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003758:	2208      	movs	r2, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	2b00      	cmp	r3, #0
 8003768:	d021      	beq.n	80037ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f023 0307 	bic.w	r3, r3, #7
 8003770:	3308      	adds	r3, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d214      	bcs.n	80037a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f023 0307 	bic.w	r3, r3, #7
 800377e:	3308      	adds	r3, #8
 8003780:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <pvPortMalloc+0x92>
        __asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	617b      	str	r3, [r7, #20]
    }
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037a6:	e002      	b.n	80037ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e000      	b.n	80037b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06e      	beq.n	8003894 <pvPortMalloc+0x178>
 80037b6:	4b45      	ldr	r3, [pc, #276]	; (80038cc <pvPortMalloc+0x1b0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d869      	bhi.n	8003894 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80037c0:	4b43      	ldr	r3, [pc, #268]	; (80038d0 <pvPortMalloc+0x1b4>)
 80037c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80037c4:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <pvPortMalloc+0x1b4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037ca:	e004      	b.n	80037d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <pvPortMalloc+0xcc>
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f1      	bne.n	80037cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <pvPortMalloc+0x1a8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d050      	beq.n	8003894 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4413      	add	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	2308      	movs	r3, #8
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	429a      	cmp	r2, r3
 8003812:	d91f      	bls.n	8003854 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <pvPortMalloc+0x120>
        __asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	613b      	str	r3, [r7, #16]
    }
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800384e:	69b8      	ldr	r0, [r7, #24]
 8003850:	f000 f908 	bl	8003a64 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <pvPortMalloc+0x1b0>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <pvPortMalloc+0x1b0>)
 8003860:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <pvPortMalloc+0x1b0>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <pvPortMalloc+0x1b8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d203      	bcs.n	8003876 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <pvPortMalloc+0x1b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <pvPortMalloc+0x1b8>)
 8003874:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <pvPortMalloc+0x1ac>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <pvPortMalloc+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <pvPortMalloc+0x1bc>)
 8003892:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003894:	f7fe fd16 	bl	80022c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <pvPortMalloc+0x19c>
        __asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	60fb      	str	r3, [r7, #12]
    }
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80038b8:	69fb      	ldr	r3, [r7, #28]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3728      	adds	r7, #40	; 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20012dd0 	.word	0x20012dd0
 80038c8:	20012de4 	.word	0x20012de4
 80038cc:	20012dd4 	.word	0x20012dd4
 80038d0:	20012dc8 	.word	0x20012dc8
 80038d4:	20012dd8 	.word	0x20012dd8
 80038d8:	20012ddc 	.word	0x20012ddc

080038dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d04d      	beq.n	800398a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038ee:	2308      	movs	r3, #8
 80038f0:	425b      	negs	r3, r3
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4b24      	ldr	r3, [pc, #144]	; (8003994 <vPortFree+0xb8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <vPortFree+0x44>
        __asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	60fb      	str	r3, [r7, #12]
    }
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <vPortFree+0x62>
        __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60bb      	str	r3, [r7, #8]
    }
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <vPortFree+0xb8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01e      	beq.n	800398a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d11a      	bne.n	800398a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <vPortFree+0xb8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003964:	f7fe fca0 	bl	80022a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <vPortFree+0xbc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4413      	add	r3, r2
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <vPortFree+0xbc>)
 8003974:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003976:	6938      	ldr	r0, [r7, #16]
 8003978:	f000 f874 	bl	8003a64 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <vPortFree+0xc0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	4a06      	ldr	r2, [pc, #24]	; (800399c <vPortFree+0xc0>)
 8003984:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003986:	f7fe fc9d 	bl	80022c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20012de4 	.word	0x20012de4
 8003998:	20012dd4 	.word	0x20012dd4
 800399c:	20012de0 	.word	0x20012de0

080039a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80039aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80039ac:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <prvHeapInit+0xac>)
 80039ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3307      	adds	r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0307 	bic.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	4a1f      	ldr	r2, [pc, #124]	; (8003a4c <prvHeapInit+0xac>)
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <prvHeapInit+0xb0>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <prvHeapInit+0xb0>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039ec:	2208      	movs	r2, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <prvHeapInit+0xb4>)
 8003a00:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <prvHeapInit+0xb4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <prvHeapInit+0xb4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <prvHeapInit+0xb4>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	; (8003a58 <prvHeapInit+0xb8>)
 8003a2e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <prvHeapInit+0xbc>)
 8003a36:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a38:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <prvHeapInit+0xc0>)
 8003a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	200001c8 	.word	0x200001c8
 8003a50:	20012dc8 	.word	0x20012dc8
 8003a54:	20012dd0 	.word	0x20012dd0
 8003a58:	20012dd8 	.word	0x20012dd8
 8003a5c:	20012dd4 	.word	0x20012dd4
 8003a60:	20012de4 	.word	0x20012de4

08003a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a6c:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <prvInsertBlockIntoFreeList+0xac>)
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	e002      	b.n	8003a78 <prvInsertBlockIntoFreeList+0x14>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d8f7      	bhi.n	8003a72 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d108      	bne.n	8003aa6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d118      	bne.n	8003aec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d00d      	beq.n	8003ae2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e008      	b.n	8003af4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e003      	b.n	8003af4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d002      	beq.n	8003b02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20012dc8 	.word	0x20012dc8
 8003b14:	20012dd0 	.word	0x20012dd0

08003b18 <__libc_init_array>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	4d0d      	ldr	r5, [pc, #52]	; (8003b50 <__libc_init_array+0x38>)
 8003b1c:	4c0d      	ldr	r4, [pc, #52]	; (8003b54 <__libc_init_array+0x3c>)
 8003b1e:	1b64      	subs	r4, r4, r5
 8003b20:	10a4      	asrs	r4, r4, #2
 8003b22:	2600      	movs	r6, #0
 8003b24:	42a6      	cmp	r6, r4
 8003b26:	d109      	bne.n	8003b3c <__libc_init_array+0x24>
 8003b28:	4d0b      	ldr	r5, [pc, #44]	; (8003b58 <__libc_init_array+0x40>)
 8003b2a:	4c0c      	ldr	r4, [pc, #48]	; (8003b5c <__libc_init_array+0x44>)
 8003b2c:	f000 f82e 	bl	8003b8c <_init>
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	2600      	movs	r6, #0
 8003b36:	42a6      	cmp	r6, r4
 8003b38:	d105      	bne.n	8003b46 <__libc_init_array+0x2e>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b40:	4798      	blx	r3
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7ee      	b.n	8003b24 <__libc_init_array+0xc>
 8003b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4a:	4798      	blx	r3
 8003b4c:	3601      	adds	r6, #1
 8003b4e:	e7f2      	b.n	8003b36 <__libc_init_array+0x1e>
 8003b50:	08003be0 	.word	0x08003be0
 8003b54:	08003be0 	.word	0x08003be0
 8003b58:	08003be0 	.word	0x08003be0
 8003b5c:	08003be4 	.word	0x08003be4

08003b60 <memcpy>:
 8003b60:	440a      	add	r2, r1
 8003b62:	4291      	cmp	r1, r2
 8003b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b68:	d100      	bne.n	8003b6c <memcpy+0xc>
 8003b6a:	4770      	bx	lr
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b76:	4291      	cmp	r1, r2
 8003b78:	d1f9      	bne.n	8003b6e <memcpy+0xe>
 8003b7a:	bd10      	pop	{r4, pc}

08003b7c <memset>:
 8003b7c:	4402      	add	r2, r0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d100      	bne.n	8003b86 <memset+0xa>
 8003b84:	4770      	bx	lr
 8003b86:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8a:	e7f9      	b.n	8003b80 <memset+0x4>

08003b8c <_init>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr

08003b98 <_fini>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr
