
14_FREERTOS_HELLO_WORLD_UART_SEGGER_SYSTEMVIEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce4  08004ce4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cec  08004cec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00012e28  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012ea4  20012ea4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1e1  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002175  00000000  00000000  0002d28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a70  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021997  00000000  00000000  000309c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc05  00000000  00000000  00052357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb74c  00000000  00000000  0005ff5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b6a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003110  00000000  00000000  0012b6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c18 	.word	0x08004c18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004c18 	.word	0x08004c18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa25 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f82d 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8b3 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f887 	bl	80006a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(myTask1, "myTask1", configMINIMAL_STACK_SIZE, NULL, 3, &myTask1Handle);
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x4c>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	2282      	movs	r2, #130	; 0x82
 80005a6:	490b      	ldr	r1, [pc, #44]	; (80005d4 <main+0x50>)
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <main+0x54>)
 80005aa:	f002 f891 	bl	80026d0 <xTaskCreate>
  xTaskCreate(myTask2, "myTask2"  , configMINIMAL_STACK_SIZE, NULL, 3, &myTask2Handle);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <main+0x58>)
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2303      	movs	r3, #3
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2282      	movs	r2, #130	; 0x82
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <main+0x5c>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x60>)
 80005be:	f002 f887 	bl	80026d0 <xTaskCreate>
  vTaskStartScheduler();
 80005c2:	f002 fa01 	bl	80029c8 <vTaskStartScheduler>

  printMessage("Hello Here is FreeRtos HelloWorld Project");
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x64>)
 80005c8:	f000 f8e6 	bl	8000798 <printMessage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x48>
 80005ce:	bf00      	nop
 80005d0:	200000dc 	.word	0x200000dc
 80005d4:	08004c30 	.word	0x08004c30
 80005d8:	08000731 	.word	0x08000731
 80005dc:	200000e0 	.word	0x200000e0
 80005e0:	08004c38 	.word	0x08004c38
 80005e4:	08000765 	.word	0x08000765
 80005e8:	08004c40 	.word	0x08004c40

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fea4 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xb4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xb4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SystemClock_Config+0xb8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <SystemClock_Config+0xb8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fc9b 	bl	8000f98 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000668:	f000 f8b8 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fefe 	bl	8001488 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000692:	f000 f8a3 	bl	80007dc <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART2_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x4c>)
 80006e0:	f001 f8b2 	bl	8001848 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f877 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000098 	.word	0x20000098
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_GPIO_Init+0x30>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <MX_GPIO_Init+0x30>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_GPIO_Init+0x30>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800

08000730 <myTask1>:

/* USER CODE BEGIN 4 */
void myTask1(void *params)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(UART_ACCSESS_KEY==1)
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <myTask1+0x28>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0fb      	beq.n	8000738 <myTask1+0x8>
		  {
			  UART_ACCSESS_KEY==0;
			  printMessage("Hello Here is Task1");
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <myTask1+0x2c>)
 8000742:	f000 f829 	bl	8000798 <printMessage>
			  UART_ACCSESS_KEY==1;
			  taskYIELD();
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <myTask1+0x30>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
		  if(UART_ACCSESS_KEY==1)
 8000756:	e7ef      	b.n	8000738 <myTask1+0x8>
 8000758:	20000000 	.word	0x20000000
 800075c:	08004c6c 	.word	0x08004c6c
 8000760:	e000ed04 	.word	0xe000ed04

08000764 <myTask2>:
		  }

	  }
}
void myTask2(void *params)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(UART_ACCSESS_KEY==1)
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <myTask2+0x28>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0fb      	beq.n	800076c <myTask2+0x8>
		  {
			  UART_ACCSESS_KEY==0;
			  printMessage("Hello Here is Task1");
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <myTask2+0x2c>)
 8000776:	f000 f80f 	bl	8000798 <printMessage>
			  UART_ACCSESS_KEY==1;
			  taskYIELD();
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <myTask2+0x30>)
 800077c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	f3bf 8f4f 	dsb	sy
 8000786:	f3bf 8f6f 	isb	sy
		  if(UART_ACCSESS_KEY==1)
 800078a:	e7ef      	b.n	800076c <myTask2+0x8>
 800078c:	20000000 	.word	0x20000000
 8000790:	08004c6c 	.word	0x08004c6c
 8000794:	e000ed04 	.word	0xe000ed04

08000798 <printMessage>:
		  }
	  }
}

void printMessage(char *format, ...)
{
 8000798:	b40f      	push	{r0, r1, r2, r3}
 800079a:	b580      	push	{r7, lr}
 800079c:	b09a      	sub	sp, #104	; 0x68
 800079e:	af00      	add	r7, sp, #0
	char comingMessage[100];

	va_list vaList;
	va_start(vaList, format);
 80007a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007a4:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fde9 	bl	8004384 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)comingMessage, strlen(comingMessage), HAL_MAX_DELAY);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd0b 	bl	80001d0 <strlen>
 80007ba:	4603      	mov	r3, r0
 80007bc:	b29a      	uxth	r2, r3
 80007be:	1d39      	adds	r1, r7, #4
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <printMessage+0x40>)
 80007c6:	f001 f88c 	bl	80018e2 <HAL_UART_Transmit>
	va_end(vaList);
}
 80007ca:	bf00      	nop
 80007cc:	3768      	adds	r7, #104	; 0x68
 80007ce:	46bd      	mov	sp, r7
 80007d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr
 80007d8:	20000098 	.word	0x20000098

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	; (80008bc <HAL_UART_MspInit+0x84>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d12b      	bne.n	80008b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_UART_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x88>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_UART_MspInit+0x88>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <HAL_UART_MspInit+0x88>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <HAL_UART_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_UART_MspInit+0x8c>)
 80008ae:	f000 f9d7 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f003 fcd8 	bl	80042d8 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20020000 	.word	0x20020000
 8000954:	00000400 	.word	0x00000400
 8000958:	200000e4 	.word	0x200000e4
 800095c:	20012ea8 	.word	0x20012ea8

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 fc97 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fde5 	bl	8000584 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80009c8:	08004cf4 	.word	0x08004cf4
  ldr r2, =_sbss
 80009cc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80009d0:	20012ea4 	.word	0x20012ea4

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f8f9 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff feec 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f903 	bl	8000c46 <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f8d9 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000004 	.word	0x20000004
 8000a74:	2000000c 	.word	0x2000000c
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000e8 	.word	0x200000e8

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff47 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff5c 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ffb0 	bl	8000bb4 <SysTick_Config>
 8000c54:	4603      	mov	r3, r0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e16b      	b.n	8000f54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 815a 	bne.w	8000f4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80b4 	beq.w	8000f4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b60      	ldr	r3, [pc, #384]	; (8000f6c <HAL_GPIO_Init+0x30c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a5f      	ldr	r2, [pc, #380]	; (8000f6c <HAL_GPIO_Init+0x30c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <HAL_GPIO_Init+0x30c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a5b      	ldr	r2, [pc, #364]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a52      	ldr	r2, [pc, #328]	; (8000f74 <HAL_GPIO_Init+0x314>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d02b      	beq.n	8000e86 <HAL_GPIO_Init+0x226>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a51      	ldr	r2, [pc, #324]	; (8000f78 <HAL_GPIO_Init+0x318>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d025      	beq.n	8000e82 <HAL_GPIO_Init+0x222>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a50      	ldr	r2, [pc, #320]	; (8000f7c <HAL_GPIO_Init+0x31c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d01f      	beq.n	8000e7e <HAL_GPIO_Init+0x21e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <HAL_GPIO_Init+0x320>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d019      	beq.n	8000e7a <HAL_GPIO_Init+0x21a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_GPIO_Init+0x324>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d013      	beq.n	8000e76 <HAL_GPIO_Init+0x216>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_GPIO_Init+0x328>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00d      	beq.n	8000e72 <HAL_GPIO_Init+0x212>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_GPIO_Init+0x32c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d007      	beq.n	8000e6e <HAL_GPIO_Init+0x20e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <HAL_GPIO_Init+0x330>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d101      	bne.n	8000e6a <HAL_GPIO_Init+0x20a>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e00e      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	e00c      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00a      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e72:	2305      	movs	r3, #5
 8000e74:	e008      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e76:	2304      	movs	r3, #4
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e004      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e002      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e82:	2301      	movs	r3, #1
 8000e84:	e000      	b.n	8000e88 <HAL_GPIO_Init+0x228>
 8000e86:	2300      	movs	r3, #0
 8000e88:	69fa      	ldr	r2, [r7, #28]
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	4093      	lsls	r3, r2
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e98:	4935      	ldr	r1, [pc, #212]	; (8000f70 <HAL_GPIO_Init+0x310>)
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eca:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed0:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_GPIO_Init+0x334>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	f67f ae90 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40013800 	.word	0x40013800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40021400 	.word	0x40021400
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	40021c00 	.word	0x40021c00
 8000f94:	40013c00 	.word	0x40013c00

08000f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e267      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d075      	beq.n	80010a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fb6:	4b88      	ldr	r3, [pc, #544]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d00c      	beq.n	8000fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc2:	4b85      	ldr	r3, [pc, #532]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d112      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fce:	4b82      	ldr	r3, [pc, #520]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fda:	d10b      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d05b      	beq.n	80010a0 <HAL_RCC_OscConfig+0x108>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d157      	bne.n	80010a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e242      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d106      	bne.n	800100c <HAL_RCC_OscConfig+0x74>
 8000ffe:	4b76      	ldr	r3, [pc, #472]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a75      	ldr	r2, [pc, #468]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001014:	d10c      	bne.n	8001030 <HAL_RCC_OscConfig+0x98>
 8001016:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6f      	ldr	r2, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b6d      	ldr	r3, [pc, #436]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6c      	ldr	r2, [pc, #432]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e00b      	b.n	8001048 <HAL_RCC_OscConfig+0xb0>
 8001030:	4b69      	ldr	r3, [pc, #420]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a68      	ldr	r2, [pc, #416]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b66      	ldr	r3, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a65      	ldr	r2, [pc, #404]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fd14 	bl	8000a7c <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fd10 	bl	8000a7c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b64      	cmp	r3, #100	; 0x64
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e207      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0xc0>
 8001076:	e014      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fd00 	bl	8000a7c <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcfc 	bl	8000a7c <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e1f3      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001092:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0xe8>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ba:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d11c      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d116      	bne.n	8001100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d001      	beq.n	80010ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e1c7      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4937      	ldr	r1, [pc, #220]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fe:	e03a      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_RCC_OscConfig+0x244>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fcb5 	bl	8000a7c <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001116:	f7ff fcb1 	bl	8000a7c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e1a8      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4925      	ldr	r1, [pc, #148]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x244>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fc94 	bl	8000a7c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fc90 	bl	8000a7c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e187      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d036      	beq.n	80011f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d016      	beq.n	80011b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_RCC_OscConfig+0x248>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fc74 	bl	8000a7c <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001198:	f7ff fc70 	bl	8000a7c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e167      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_RCC_OscConfig+0x240>)
 80011ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x200>
 80011b6:	e01b      	b.n	80011f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_RCC_OscConfig+0x248>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011be:	f7ff fc5d 	bl	8000a7c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	e00e      	b.n	80011e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fc59 	bl	8000a7c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d907      	bls.n	80011e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e150      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 80011d8:	40023800 	.word	0x40023800
 80011dc:	42470000 	.word	0x42470000
 80011e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80011e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1ea      	bne.n	80011c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 8097 	beq.w	800132c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001202:	4b81      	ldr	r3, [pc, #516]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10f      	bne.n	800122e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b7a      	ldr	r3, [pc, #488]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122e:	4b77      	ldr	r3, [pc, #476]	; (800140c <HAL_RCC_OscConfig+0x474>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800123a:	4b74      	ldr	r3, [pc, #464]	; (800140c <HAL_RCC_OscConfig+0x474>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a73      	ldr	r2, [pc, #460]	; (800140c <HAL_RCC_OscConfig+0x474>)
 8001240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001246:	f7ff fc19 	bl	8000a7c <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124e:	f7ff fc15 	bl	8000a7c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e10c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b6a      	ldr	r3, [pc, #424]	; (800140c <HAL_RCC_OscConfig+0x474>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x2ea>
 8001274:	4b64      	ldr	r3, [pc, #400]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4a63      	ldr	r2, [pc, #396]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	; 0x70
 8001280:	e01c      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b05      	cmp	r3, #5
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x30c>
 800128a:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	4a5e      	ldr	r2, [pc, #376]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6713      	str	r3, [r2, #112]	; 0x70
 8001296:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	4a5b      	ldr	r2, [pc, #364]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6713      	str	r3, [r2, #112]	; 0x70
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0x324>
 80012a4:	4b58      	ldr	r3, [pc, #352]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a8:	4a57      	ldr	r2, [pc, #348]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6713      	str	r3, [r2, #112]	; 0x70
 80012b0:	4b55      	ldr	r3, [pc, #340]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a54      	ldr	r2, [pc, #336]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 0304 	bic.w	r3, r3, #4
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d015      	beq.n	80012f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fbda 	bl	8000a7c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fbd6 	bl	8000a7c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e0cb      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0ee      	beq.n	80012cc <HAL_RCC_OscConfig+0x334>
 80012ee:	e014      	b.n	800131a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fbc4 	bl	8000a7c <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f6:	e00a      	b.n	800130e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f8:	f7ff fbc0 	bl	8000a7c <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f241 3288 	movw	r2, #5000	; 0x1388
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0b5      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ee      	bne.n	80012f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	4a38      	ldr	r2, [pc, #224]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800132a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80a1 	beq.w	8001478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b08      	cmp	r3, #8
 8001340:	d05c      	beq.n	80013fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d141      	bne.n	80013ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_RCC_OscConfig+0x478>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb94 	bl	8000a7c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb90 	bl	8000a7c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e087      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69da      	ldr	r2, [r3, #28]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	3b01      	subs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	491b      	ldr	r1, [pc, #108]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x478>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb69 	bl	8000a7c <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff fb65 	bl	8000a7c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e05c      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x416>
 80013cc:	e054      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x478>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb52 	bl	8000a7c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fb4e 	bl	8000a7c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e045      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_RCC_OscConfig+0x470>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x444>
 80013fa:	e03d      	b.n	8001478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e038      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000
 8001410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x4ec>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d028      	beq.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d121      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d11a      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800144a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144c:	4293      	cmp	r3, r2
 800144e:	d111      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	085b      	lsrs	r3, r3, #1
 800145c:	3b01      	subs	r3, #1
 800145e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d107      	bne.n	8001474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0cc      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d90c      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a58      	ldr	r2, [pc, #352]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d044      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d119      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001542:	2b03      	cmp	r3, #3
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e06f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e067      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001566:	4b37      	ldr	r3, [pc, #220]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f023 0203 	bic.w	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001578:	f7ff fa80 	bl	8000a7c <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	e00a      	b.n	8001596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7ff fa7c 	bl	8000a7c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e04f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 020c 	and.w	r2, r3, #12
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d1eb      	bne.n	8001580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d20c      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b6:	4b22      	ldr	r3, [pc, #136]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	4313      	orrs	r3, r2
 800160c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	490a      	ldr	r1, [pc, #40]	; (8001648 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f9f4 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00
 8001644:	40023800 	.word	0x40023800
 8001648:	08004c98 	.word	0x08004c98
 800164c:	20000004 	.word	0x20000004
 8001650:	20000008 	.word	0x20000008

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b090      	sub	sp, #64	; 0x40
 800165a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d00d      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x40>
 8001678:	2b08      	cmp	r3, #8
 800167a:	f200 80a1 	bhi.w	80017c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_RCC_GetSysClockFreq+0x34>
 8001682:	2b04      	cmp	r3, #4
 8001684:	d003      	beq.n	800168e <HAL_RCC_GetSysClockFreq+0x3a>
 8001686:	e09b      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800168c:	e09b      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001692:	e098      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001694:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800169e:	4b4d      	ldr	r3, [pc, #308]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d028      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	099b      	lsrs	r3, r3, #6
 80016b0:	2200      	movs	r2, #0
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	627a      	str	r2, [r7, #36]	; 0x24
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016bc:	2100      	movs	r1, #0
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 80016c0:	fb03 f201 	mul.w	r2, r3, r1
 80016c4:	2300      	movs	r3, #0
 80016c6:	fb00 f303 	mul.w	r3, r0, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <HAL_RCC_GetSysClockFreq+0x188>)
 80016ce:	fba0 1202 	umull	r1, r2, r0, r2
 80016d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016d4:	460a      	mov	r2, r1
 80016d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016da:	4413      	add	r3, r2
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	2200      	movs	r2, #0
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	61fa      	str	r2, [r7, #28]
 80016e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016ee:	f7fe fdc7 	bl	8000280 <__aeabi_uldivmod>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4613      	mov	r3, r2
 80016f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fa:	e053      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	099b      	lsrs	r3, r3, #6
 8001702:	2200      	movs	r2, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	617a      	str	r2, [r7, #20]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800170e:	f04f 0b00 	mov.w	fp, #0
 8001712:	4652      	mov	r2, sl
 8001714:	465b      	mov	r3, fp
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ebb2 080a 	subs.w	r8, r2, sl
 800172e:	eb63 090b 	sbc.w	r9, r3, fp
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800173e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001742:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001746:	ebb2 0408 	subs.w	r4, r2, r8
 800174a:	eb63 0509 	sbc.w	r5, r3, r9
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	00eb      	lsls	r3, r5, #3
 8001758:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175c:	00e2      	lsls	r2, r4, #3
 800175e:	4614      	mov	r4, r2
 8001760:	461d      	mov	r5, r3
 8001762:	eb14 030a 	adds.w	r3, r4, sl
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	eb45 030b 	adc.w	r3, r5, fp
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177a:	4629      	mov	r1, r5
 800177c:	028b      	lsls	r3, r1, #10
 800177e:	4621      	mov	r1, r4
 8001780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001784:	4621      	mov	r1, r4
 8001786:	028a      	lsls	r2, r1, #10
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178e:	2200      	movs	r2, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	60fa      	str	r2, [r7, #12]
 8001794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001798:	f7fe fd72 	bl	8000280 <__aeabi_uldivmod>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	3301      	adds	r3, #1
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3740      	adds	r7, #64	; 0x40
 80017cc:	46bd      	mov	sp, r7
 80017ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	00f42400 	.word	0x00f42400
 80017dc:	017d7840 	.word	0x017d7840

080017e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff0 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4903      	ldr	r1, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	08004ca8 	.word	0x08004ca8

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffdc 	bl	80017e0 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0b5b      	lsrs	r3, r3, #13
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	08004ca8 	.word	0x08004ca8

08001848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e03f      	b.n	80018da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe ffe2 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2224      	movs	r2, #36	; 0x24
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800188a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f929 	bl	8001ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b08a      	sub	sp, #40	; 0x28
 80018e6:	af02      	add	r7, sp, #8
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4613      	mov	r3, r2
 80018f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b20      	cmp	r3, #32
 8001900:	d17c      	bne.n	80019fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_UART_Transmit+0x2c>
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e075      	b.n	80019fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_UART_Transmit+0x3e>
 800191c:	2302      	movs	r3, #2
 800191e:	e06e      	b.n	80019fe <HAL_UART_Transmit+0x11c>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2221      	movs	r2, #33	; 0x21
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001936:	f7ff f8a1 	bl	8000a7c <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	88fa      	ldrh	r2, [r7, #6]
 8001940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001950:	d108      	bne.n	8001964 <HAL_UART_Transmit+0x82>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d104      	bne.n	8001964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e003      	b.n	800196c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001974:	e02a      	b.n	80019cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2200      	movs	r2, #0
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f840 	bl	8001a06 <UART_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e036      	b.n	80019fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3302      	adds	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	e007      	b.n	80019be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1cf      	bne.n	8001976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2200      	movs	r2, #0
 80019de:	2140      	movs	r1, #64	; 0x40
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f810 	bl	8001a06 <UART_WaitOnFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e006      	b.n	80019fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e000      	b.n	80019fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019fc:	2302      	movs	r3, #2
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b090      	sub	sp, #64	; 0x40
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4613      	mov	r3, r2
 8001a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a16:	e050      	b.n	8001aba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1e:	d04c      	beq.n	8001aba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d007      	beq.n	8001a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a26:	f7ff f829 	bl	8000a7c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d241      	bcs.n	8001aba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	330c      	adds	r3, #12
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	e853 3f00 	ldrex	r3, [r3]
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	330c      	adds	r3, #12
 8001a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a56:	637a      	str	r2, [r7, #52]	; 0x34
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a5e:	e841 2300 	strex	r3, r2, [r1]
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1e5      	bne.n	8001a36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3314      	adds	r3, #20
 8001a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	e853 3f00 	ldrex	r3, [r3]
 8001a78:	613b      	str	r3, [r7, #16]
   return(result);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3314      	adds	r3, #20
 8001a88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a8a:	623a      	str	r2, [r7, #32]
 8001a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a8e:	69f9      	ldr	r1, [r7, #28]
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	e841 2300 	strex	r3, r2, [r1]
 8001a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e5      	bne.n	8001a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e00f      	b.n	8001ada <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	bf0c      	ite	eq
 8001aca:	2301      	moveq	r3, #1
 8001acc:	2300      	movne	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d09f      	beq.n	8001a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3740      	adds	r7, #64	; 0x40
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b0c0      	sub	sp, #256	; 0x100
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b00:	68d9      	ldr	r1, [r3, #12]
 8001b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	ea40 0301 	orr.w	r3, r0, r1
 8001b0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b3c:	f021 010c 	bic.w	r1, r1, #12
 8001b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5e:	6999      	ldr	r1, [r3, #24]
 8001b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	ea40 0301 	orr.w	r3, r0, r1
 8001b6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b8f      	ldr	r3, [pc, #572]	; (8001db0 <UART_SetConfig+0x2cc>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d005      	beq.n	8001b84 <UART_SetConfig+0xa0>
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <UART_SetConfig+0x2d0>)
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d104      	bne.n	8001b8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b84:	f7ff fe4c 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 8001b88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001b8c:	e003      	b.n	8001b96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b8e:	f7ff fe33 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8001b92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba0:	f040 810c 	bne.w	8001dbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001bb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	462b      	mov	r3, r5
 8001bba:	1891      	adds	r1, r2, r2
 8001bbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001bbe:	415b      	adcs	r3, r3
 8001bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	eb12 0801 	adds.w	r8, r2, r1
 8001bcc:	4629      	mov	r1, r5
 8001bce:	eb43 0901 	adc.w	r9, r3, r1
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be6:	4690      	mov	r8, r2
 8001be8:	4699      	mov	r9, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	eb18 0303 	adds.w	r3, r8, r3
 8001bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	eb49 0303 	adc.w	r3, r9, r3
 8001bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c12:	460b      	mov	r3, r1
 8001c14:	18db      	adds	r3, r3, r3
 8001c16:	653b      	str	r3, [r7, #80]	; 0x50
 8001c18:	4613      	mov	r3, r2
 8001c1a:	eb42 0303 	adc.w	r3, r2, r3
 8001c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c28:	f7fe fb2a 	bl	8000280 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <UART_SetConfig+0x2d4>)
 8001c32:	fba3 2302 	umull	r2, r3, r3, r2
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	011c      	lsls	r4, r3, #4
 8001c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	464b      	mov	r3, r9
 8001c50:	1891      	adds	r1, r2, r2
 8001c52:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c54:	415b      	adcs	r3, r3
 8001c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001c62:	4649      	mov	r1, r9
 8001c64:	eb43 0b01 	adc.w	fp, r3, r1
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c7c:	4692      	mov	sl, r2
 8001c7e:	469b      	mov	fp, r3
 8001c80:	4643      	mov	r3, r8
 8001c82:	eb1a 0303 	adds.w	r3, sl, r3
 8001c86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001c90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ca0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ca4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	18db      	adds	r3, r3, r3
 8001cac:	643b      	str	r3, [r7, #64]	; 0x40
 8001cae:	4613      	mov	r3, r2
 8001cb0:	eb42 0303 	adc.w	r3, r2, r3
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001cbe:	f7fe fadf 	bl	8000280 <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <UART_SetConfig+0x2d4>)
 8001cca:	fba3 2301 	umull	r2, r3, r3, r1
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2264      	movs	r2, #100	; 0x64
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	1acb      	subs	r3, r1, r3
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001cde:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <UART_SetConfig+0x2d4>)
 8001ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cec:	441c      	add	r4, r3
 8001cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001cf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001cfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d00:	4642      	mov	r2, r8
 8001d02:	464b      	mov	r3, r9
 8001d04:	1891      	adds	r1, r2, r2
 8001d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d08:	415b      	adcs	r3, r3
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d10:	4641      	mov	r1, r8
 8001d12:	1851      	adds	r1, r2, r1
 8001d14:	6339      	str	r1, [r7, #48]	; 0x30
 8001d16:	4649      	mov	r1, r9
 8001d18:	414b      	adcs	r3, r1
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d28:	4659      	mov	r1, fp
 8001d2a:	00cb      	lsls	r3, r1, #3
 8001d2c:	4651      	mov	r1, sl
 8001d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d32:	4651      	mov	r1, sl
 8001d34:	00ca      	lsls	r2, r1, #3
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001d44:	464b      	mov	r3, r9
 8001d46:	460a      	mov	r2, r1
 8001d48:	eb42 0303 	adc.w	r3, r2, r3
 8001d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001d60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001d64:	460b      	mov	r3, r1
 8001d66:	18db      	adds	r3, r3, r3
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	eb42 0303 	adc.w	r3, r2, r3
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d7a:	f7fe fa81 	bl	8000280 <__aeabi_uldivmod>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <UART_SetConfig+0x2d4>)
 8001d84:	fba3 1302 	umull	r1, r3, r3, r2
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	2164      	movs	r1, #100	; 0x64
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	3332      	adds	r3, #50	; 0x32
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <UART_SetConfig+0x2d4>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	f003 0207 	and.w	r2, r3, #7
 8001da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4422      	add	r2, r4
 8001daa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dac:	e105      	b.n	8001fba <UART_SetConfig+0x4d6>
 8001dae:	bf00      	nop
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001dc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001dca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001dce:	4642      	mov	r2, r8
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	1891      	adds	r1, r2, r2
 8001dd4:	6239      	str	r1, [r7, #32]
 8001dd6:	415b      	adcs	r3, r3
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dde:	4641      	mov	r1, r8
 8001de0:	1854      	adds	r4, r2, r1
 8001de2:	4649      	mov	r1, r9
 8001de4:	eb43 0501 	adc.w	r5, r3, r1
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	00eb      	lsls	r3, r5, #3
 8001df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	18e3      	adds	r3, r4, r3
 8001e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e04:	464b      	mov	r3, r9
 8001e06:	eb45 0303 	adc.w	r3, r5, r3
 8001e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	008b      	lsls	r3, r1, #2
 8001e2e:	4621      	mov	r1, r4
 8001e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e34:	4621      	mov	r1, r4
 8001e36:	008a      	lsls	r2, r1, #2
 8001e38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e3c:	f7fe fa20 	bl	8000280 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <UART_SetConfig+0x4e4>)
 8001e46:	fba3 2302 	umull	r2, r3, r3, r2
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	011c      	lsls	r4, r3, #4
 8001e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	1891      	adds	r1, r2, r2
 8001e66:	61b9      	str	r1, [r7, #24]
 8001e68:	415b      	adcs	r3, r3
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e70:	4641      	mov	r1, r8
 8001e72:	1851      	adds	r1, r2, r1
 8001e74:	6139      	str	r1, [r7, #16]
 8001e76:	4649      	mov	r1, r9
 8001e78:	414b      	adcs	r3, r1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e88:	4659      	mov	r1, fp
 8001e8a:	00cb      	lsls	r3, r1, #3
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e92:	4651      	mov	r1, sl
 8001e94:	00ca      	lsls	r2, r1, #3
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	eb42 0303 	adc.w	r3, r2, r3
 8001eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001ec8:	4649      	mov	r1, r9
 8001eca:	008b      	lsls	r3, r1, #2
 8001ecc:	4641      	mov	r1, r8
 8001ece:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ed2:	4641      	mov	r1, r8
 8001ed4:	008a      	lsls	r2, r1, #2
 8001ed6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001eda:	f7fe f9d1 	bl	8000280 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <UART_SetConfig+0x4e4>)
 8001ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	2164      	movs	r1, #100	; 0x64
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	3332      	adds	r3, #50	; 0x32
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <UART_SetConfig+0x4e4>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f02:	441c      	add	r4, r3
 8001f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f08:	2200      	movs	r2, #0
 8001f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8001f0c:	677a      	str	r2, [r7, #116]	; 0x74
 8001f0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f12:	4642      	mov	r2, r8
 8001f14:	464b      	mov	r3, r9
 8001f16:	1891      	adds	r1, r2, r2
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	415b      	adcs	r3, r3
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f22:	4641      	mov	r1, r8
 8001f24:	1851      	adds	r1, r2, r1
 8001f26:	6039      	str	r1, [r7, #0]
 8001f28:	4649      	mov	r1, r9
 8001f2a:	414b      	adcs	r3, r1
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f3a:	4659      	mov	r1, fp
 8001f3c:	00cb      	lsls	r3, r1, #3
 8001f3e:	4651      	mov	r1, sl
 8001f40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f44:	4651      	mov	r1, sl
 8001f46:	00ca      	lsls	r2, r1, #3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4642      	mov	r2, r8
 8001f50:	189b      	adds	r3, r3, r2
 8001f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f54:	464b      	mov	r3, r9
 8001f56:	460a      	mov	r2, r1
 8001f58:	eb42 0303 	adc.w	r3, r2, r3
 8001f5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	663b      	str	r3, [r7, #96]	; 0x60
 8001f68:	667a      	str	r2, [r7, #100]	; 0x64
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001f76:	4649      	mov	r1, r9
 8001f78:	008b      	lsls	r3, r1, #2
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f80:	4641      	mov	r1, r8
 8001f82:	008a      	lsls	r2, r1, #2
 8001f84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f88:	f7fe f97a 	bl	8000280 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <UART_SetConfig+0x4e4>)
 8001f92:	fba3 1302 	umull	r1, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2164      	movs	r1, #100	; 0x64
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	3332      	adds	r3, #50	; 0x32
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <UART_SetConfig+0x4e4>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4422      	add	r2, r4
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	51eb851f 	.word	0x51eb851f

08001fcc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0208 	add.w	r2, r3, #8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f103 0208 	add.w	r2, r3, #8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f103 0208 	add.w	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d103      	bne.n	8002046 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e00c      	b.n	8002060 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3308      	adds	r3, #8
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e002      	b.n	8002054 <vListInsert+0x2e>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d2f6      	bcs.n	800204e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6892      	ldr	r2, [r2, #8]
 80020ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6852      	ldr	r2, [r2, #4]
 80020b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d103      	bne.n	80020cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002116:	bf00      	nop
 8002118:	e7fe      	b.n	8002118 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d05d      	beq.n	80021dc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	d059      	beq.n	80021dc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	2100      	movs	r1, #0
 8002132:	fba3 2302 	umull	r2, r3, r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d000      	beq.n	800213c <xQueueGenericReset+0x50>
 800213a:	2101      	movs	r1, #1
 800213c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d14c      	bne.n	80021dc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002142:	f001 fde9 	bl	8003d18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	6939      	ldr	r1, [r7, #16]
 8002150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	441a      	add	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2200      	movs	r2, #0
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	3b01      	subs	r3, #1
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	441a      	add	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d114      	bne.n	80021c2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01a      	beq.n	80021d6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	3310      	adds	r3, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ff57 	bl	8003058 <xTaskRemoveFromEventList>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <xQueueGenericReset+0x11c>)
 80021b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	e009      	b.n	80021d6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3310      	adds	r3, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff00 	bl	8001fcc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3324      	adds	r3, #36	; 0x24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fefb 	bl	8001fcc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80021d6:	f001 fdcf 	bl	8003d78 <vPortExitCritical>
 80021da:	e001      	b.n	80021e0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <xQueueGenericReset+0x110>
        __asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	60bb      	str	r3, [r7, #8]
    }
 80021f8:	bf00      	nop
 80021fa:	e7fe      	b.n	80021fa <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80021fc:	697b      	ldr	r3, [r7, #20]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000ed04 	.word	0xe000ed04

0800220c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af02      	add	r7, sp, #8
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d02e      	beq.n	8002282 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002224:	2100      	movs	r1, #0
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	fba3 2302 	umull	r2, r3, r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d000      	beq.n	8002234 <xQueueGenericCreate+0x28>
 8002232:	2101      	movs	r1, #1
 8002234:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	d123      	bne.n	8002282 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002242:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002246:	d81c      	bhi.n	8002282 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3350      	adds	r3, #80	; 0x50
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fe40 	bl	8003edc <pvPortMalloc>
 800225c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01c      	beq.n	800229e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3350      	adds	r3, #80	; 0x50
 800226c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f814 	bl	80022a8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002280:	e00d      	b.n	800229e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <xQueueGenericCreate+0x92>
        __asm volatile
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	613b      	str	r3, [r7, #16]
    }
 800229a:	bf00      	nop
 800229c:	e7fe      	b.n	800229c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800229e:	69fb      	ldr	r3, [r7, #28]
    }
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e002      	b.n	80022ca <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022d6:	2101      	movs	r1, #1
 80022d8:	69b8      	ldr	r0, [r7, #24]
 80022da:	f7ff ff07 	bl	80020ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <xQueueReceive+0x30>
        __asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	623b      	str	r3, [r7, #32]
    }
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <xQueueReceive+0x3e>
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <xQueueReceive+0x42>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <xQueueReceive+0x44>
 8002332:	2300      	movs	r3, #0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <xQueueReceive+0x5e>
        __asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	61fb      	str	r3, [r7, #28]
    }
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800234e:	f001 f893 	bl	8003478 <xTaskGetSchedulerState>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <xQueueReceive+0x6e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <xQueueReceive+0x72>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <xQueueReceive+0x74>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <xQueueReceive+0x8e>
        __asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	61bb      	str	r3, [r7, #24]
    }
 800237a:	bf00      	nop
 800237c:	e7fe      	b.n	800237c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800237e:	f001 fccb 	bl	8003d18 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01f      	beq.n	80023ce <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002392:	f000 f88d 	bl	80024b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00f      	beq.n	80023c6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	3310      	adds	r3, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fe54 	bl	8003058 <xTaskRemoveFromEventList>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <xQueueReceive+0x1bc>)
 80023b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80023c6:	f001 fcd7 	bl	8003d78 <vPortExitCritical>
                return pdPASS;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e069      	b.n	80024a2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023d4:	f001 fcd0 	bl	8003d78 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80023d8:	2300      	movs	r3, #0
 80023da:	e062      	b.n	80024a2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 ff0c 	bl	8003204 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023f0:	f001 fcc2 	bl	8003d78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023f4:	f000 fb3a 	bl	8002a6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023f8:	f001 fc8e 	bl	8003d18 <vPortEnterCritical>
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002402:	b25b      	sxtb	r3, r3
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d103      	bne.n	8002412 <xQueueReceive+0x122>
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002418:	b25b      	sxtb	r3, r3
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d103      	bne.n	8002428 <xQueueReceive+0x138>
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002428:	f001 fca6 	bl	8003d78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242c:	1d3a      	adds	r2, r7, #4
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fefb 	bl	8003230 <xTaskCheckForTimeOut>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d123      	bne.n	8002488 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002442:	f000 f8ad 	bl	80025a0 <prvIsQueueEmpty>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d017      	beq.n	800247c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fd95 	bl	8002f84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800245a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800245c:	f000 f84e 	bl	80024fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002460:	f000 fb12 	bl	8002a88 <xTaskResumeAll>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d189      	bne.n	800237e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <xQueueReceive+0x1bc>)
 800246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	e780      	b.n	800237e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800247c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800247e:	f000 f83d 	bl	80024fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002482:	f000 fb01 	bl	8002a88 <xTaskResumeAll>
 8002486:	e77a      	b.n	800237e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f000 f837 	bl	80024fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800248e:	f000 fafb 	bl	8002a88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002494:	f000 f884 	bl	80025a0 <prvIsQueueEmpty>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f43f af6f 	beq.w	800237e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80024a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000ed04 	.word	0xe000ed04

080024b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d018      	beq.n	80024f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	441a      	add	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d303      	bcc.n	80024e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	461a      	mov	r2, r3
 80024ee:	6838      	ldr	r0, [r7, #0]
 80024f0:	f001 ff1c 	bl	800432c <memcpy>
    }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002504:	f001 fc08 	bl	8003d18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800250e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002510:	e011      	b.n	8002536 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3324      	adds	r3, #36	; 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fd9a 	bl	8003058 <xTaskRemoveFromEventList>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800252a:	f000 fee7 	bl	80032fc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	3b01      	subs	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	dce9      	bgt.n	8002512 <prvUnlockQueue+0x16>
 800253e:	e000      	b.n	8002542 <prvUnlockQueue+0x46>
                        break;
 8002540:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800254a:	f001 fc15 	bl	8003d78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800254e:	f001 fbe3 	bl	8003d18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002558:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800255a:	e011      	b.n	8002580 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d012      	beq.n	800258a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3310      	adds	r3, #16
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fd75 	bl	8003058 <xTaskRemoveFromEventList>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002574:	f000 fec2 	bl	80032fc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	3b01      	subs	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	dce9      	bgt.n	800255c <prvUnlockQueue+0x60>
 8002588:	e000      	b.n	800258c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800258a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002594:	f001 fbf0 	bl	8003d78 <vPortExitCritical>
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80025a8:	f001 fbb6 	bl	8003d18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e001      	b.n	80025be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80025be:	f001 fbdb 	bl	8003d78 <vPortExitCritical>

    return xReturn;
 80025c2:	68fb      	ldr	r3, [r7, #12]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <vQueueAddToRegistry+0x26>
        __asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	60fb      	str	r3, [r7, #12]
    }
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d024      	beq.n	8002646 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e01e      	b.n	8002640 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002602:	4a18      	ldr	r2, [pc, #96]	; (8002664 <vQueueAddToRegistry+0x98>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d105      	bne.n	800261e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4a13      	ldr	r2, [pc, #76]	; (8002664 <vQueueAddToRegistry+0x98>)
 8002618:	4413      	add	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
                    break;
 800261c:	e013      	b.n	8002646 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <vQueueAddToRegistry+0x6e>
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <vQueueAddToRegistry+0x98>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <vQueueAddToRegistry+0x98>)
 8002636:	4413      	add	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b07      	cmp	r3, #7
 8002644:	d9dd      	bls.n	8002602 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	200000ec 	.word	0x200000ec

08002668 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002678:	f001 fb4e 	bl	8003d18 <vPortEnterCritical>
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <vQueueWaitForMessageRestricted+0x2a>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002698:	b25b      	sxtb	r3, r3
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d103      	bne.n	80026a8 <vQueueWaitForMessageRestricted+0x40>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a8:	f001 fb66 	bl	8003d78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fc85 	bl	8002fcc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff1a 	bl	80024fc <prvUnlockQueue>
    }
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fbf9 	bl	8003edc <pvPortMalloc>
 80026ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026f2:	2058      	movs	r0, #88	; 0x58
 80026f4:	f001 fbf2 	bl	8003edc <pvPortMalloc>
 80026f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
 8002706:	e005      	b.n	8002714 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002708:	6978      	ldr	r0, [r7, #20]
 800270a:	f001 fcc7 	bl	800409c <vPortFree>
 800270e:	e001      	b.n	8002714 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	2300      	movs	r3, #0
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f80e 	bl	8002752 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002736:	69f8      	ldr	r0, [r7, #28]
 8002738:	f000 f8b0 	bl	800289c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800273c:	2301      	movs	r3, #1
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e002      	b.n	8002748 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002748:	69bb      	ldr	r3, [r7, #24]
    }
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	461a      	mov	r2, r3
 800276a:	21a5      	movs	r1, #165	; 0xa5
 800276c:	f001 fdec 	bl	8004348 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800277a:	3b01      	subs	r3, #1
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f023 0307 	bic.w	r3, r3, #7
 8002788:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <prvInitialiseNewTask+0x58>
        __asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	617b      	str	r3, [r7, #20]
    }
 80027a6:	bf00      	nop
 80027a8:	e7fe      	b.n	80027a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01f      	beq.n	80027f0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	e012      	b.n	80027dc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	7819      	ldrb	r1, [r3, #0]
 80027be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	3334      	adds	r3, #52	; 0x34
 80027c6:	460a      	mov	r2, r1
 80027c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b09      	cmp	r3, #9
 80027e0:	d9e9      	bls.n	80027b6 <prvInitialiseNewTask+0x64>
 80027e2:	e000      	b.n	80027e6 <prvInitialiseNewTask+0x94>
            {
                break;
 80027e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80027ee:	e003      	b.n	80027f8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d90a      	bls.n	8002814 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	613b      	str	r3, [r7, #16]
    }
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	2b04      	cmp	r3, #4
 8002818:	d901      	bls.n	800281e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800281a:	2304      	movs	r3, #4
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002828:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2200      	movs	r2, #0
 800282e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	3304      	adds	r3, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fbe9 	bl	800200c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	3318      	adds	r3, #24
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fbe4 	bl	800200c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002848:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	f1c3 0205 	rsb	r2, r3, #5
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	3350      	adds	r3, #80	; 0x50
 800285e:	2204      	movs	r2, #4
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fd70 	bl	8004348 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	3354      	adds	r3, #84	; 0x54
 800286c:	2201      	movs	r2, #1
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f001 fd69 	bl	8004348 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	69b8      	ldr	r0, [r7, #24]
 800287c:	f001 f91e 	bl	8003abc <pxPortInitialiseStack>
 8002880:	4602      	mov	r2, r0
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002892:	bf00      	nop
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80028a4:	f001 fa38 	bl	8003d18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80028a8:	4b40      	ldr	r3, [pc, #256]	; (80029ac <prvAddNewTaskToReadyList+0x110>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <prvAddNewTaskToReadyList+0x110>)
 80028b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <prvAddNewTaskToReadyList+0x114>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <prvAddNewTaskToReadyList+0x114>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <prvAddNewTaskToReadyList+0x110>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d110      	bne.n	80028ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028c8:	f000 fd3c 	bl	8003344 <prvInitialiseTaskLists>
 80028cc:	e00d      	b.n	80028ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <prvAddNewTaskToReadyList+0x118>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028d6:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <prvAddNewTaskToReadyList+0x114>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d802      	bhi.n	80028ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028e4:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <prvAddNewTaskToReadyList+0x114>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <prvAddNewTaskToReadyList+0x11c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <prvAddNewTaskToReadyList+0x11c>)
 80028f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <prvAddNewTaskToReadyList+0x11c>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <prvAddNewTaskToReadyList+0x120>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <prvAddNewTaskToReadyList+0x120>)
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	492b      	ldr	r1, [pc, #172]	; (80029c0 <prvAddNewTaskToReadyList+0x124>)
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	3204      	adds	r2, #4
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1d1a      	adds	r2, r3, #4
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <prvAddNewTaskToReadyList+0x124>)
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	615a      	str	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4918      	ldr	r1, [pc, #96]	; (80029c0 <prvAddNewTaskToReadyList+0x124>)
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	4814      	ldr	r0, [pc, #80]	; (80029c0 <prvAddNewTaskToReadyList+0x124>)
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4403      	add	r3, r0
 8002978:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800297a:	f001 f9fd 	bl	8003d78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <prvAddNewTaskToReadyList+0x118>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00e      	beq.n	80029a4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <prvAddNewTaskToReadyList+0x114>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <prvAddNewTaskToReadyList+0x128>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000204 	.word	0x20000204
 80029b0:	2000012c 	.word	0x2000012c
 80029b4:	20000210 	.word	0x20000210
 80029b8:	20000220 	.word	0x20000220
 80029bc:	2000020c 	.word	0x2000020c
 80029c0:	20000130 	.word	0x20000130
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <vTaskStartScheduler+0x88>)
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	2282      	movs	r2, #130	; 0x82
 80029da:	491e      	ldr	r1, [pc, #120]	; (8002a54 <vTaskStartScheduler+0x8c>)
 80029dc:	481e      	ldr	r0, [pc, #120]	; (8002a58 <vTaskStartScheduler+0x90>)
 80029de:	f7ff fe77 	bl	80026d0 <xTaskCreate>
 80029e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80029ea:	f000 fde3 	bl	80035b4 <xTimerCreateTimerTask>
 80029ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d116      	bne.n	8002a24 <vTaskStartScheduler+0x5c>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	60bb      	str	r3, [r7, #8]
    }
 8002a08:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <vTaskStartScheduler+0x94>)
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <vTaskStartScheduler+0x98>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <vTaskStartScheduler+0x9c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a1e:	f001 f8d9 	bl	8003bd4 <xPortStartScheduler>
 8002a22:	e00e      	b.n	8002a42 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d10a      	bne.n	8002a42 <vTaskStartScheduler+0x7a>
        __asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	607b      	str	r3, [r7, #4]
    }
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <vTaskStartScheduler+0xa0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000228 	.word	0x20000228
 8002a54:	08004c80 	.word	0x08004c80
 8002a58:	08003315 	.word	0x08003315
 8002a5c:	20000224 	.word	0x20000224
 8002a60:	20000210 	.word	0x20000210
 8002a64:	20000208 	.word	0x20000208
 8002a68:	20000010 	.word	0x20000010

08002a6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <vTaskSuspendAll+0x18>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <vTaskSuspendAll+0x18>)
 8002a78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	2000022c 	.word	0x2000022c

08002a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a96:	4b71      	ldr	r3, [pc, #452]	; (8002c5c <xTaskResumeAll+0x1d4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ab4:	f001 f930 	bl	8003d18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <xTaskResumeAll+0x1d4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	4a67      	ldr	r2, [pc, #412]	; (8002c5c <xTaskResumeAll+0x1d4>)
 8002ac0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac2:	4b66      	ldr	r3, [pc, #408]	; (8002c5c <xTaskResumeAll+0x1d4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 80c0 	bne.w	8002c4c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <xTaskResumeAll+0x1d8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80bb 	beq.w	8002c4c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ad6:	e08a      	b.n	8002bee <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <xTaskResumeAll+0x1dc>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	6a12      	ldr	r2, [r2, #32]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	69d2      	ldr	r2, [r2, #28]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3318      	adds	r3, #24
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d103      	bne.n	8002b0e <xTaskResumeAll+0x86>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2200      	movs	r2, #0
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	68d2      	ldr	r2, [r2, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d103      	bne.n	8002b4c <xTaskResumeAll+0xc4>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <xTaskResumeAll+0x1e0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <xTaskResumeAll+0x1e0>)
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	493e      	ldr	r1, [pc, #248]	; (8002c6c <xTaskResumeAll+0x1e4>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3304      	adds	r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	3204      	adds	r2, #4
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4a2e      	ldr	r2, [pc, #184]	; (8002c6c <xTaskResumeAll+0x1e4>)
 8002bb2:	441a      	add	r2, r3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	492b      	ldr	r1, [pc, #172]	; (8002c6c <xTaskResumeAll+0x1e4>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	4827      	ldr	r0, [pc, #156]	; (8002c6c <xTaskResumeAll+0x1e4>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4403      	add	r3, r0
 8002bd8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <xTaskResumeAll+0x1e8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <xTaskResumeAll+0x1ec>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <xTaskResumeAll+0x1dc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f47f af70 	bne.w	8002ad8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002bfe:	f000 fc1f 	bl	8003440 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <xTaskResumeAll+0x1f0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c0e:	f000 f847 	bl	8002ca0 <xTaskIncrementTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <xTaskResumeAll+0x1ec>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f1      	bne.n	8002c0e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <xTaskResumeAll+0x1f0>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <xTaskResumeAll+0x1ec>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <xTaskResumeAll+0x1f4>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c4c:	f001 f894 	bl	8003d78 <vPortExitCritical>

    return xAlreadyYielded;
 8002c50:	69bb      	ldr	r3, [r7, #24]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000022c 	.word	0x2000022c
 8002c60:	20000204 	.word	0x20000204
 8002c64:	200001c4 	.word	0x200001c4
 8002c68:	2000020c 	.word	0x2000020c
 8002c6c:	20000130 	.word	0x20000130
 8002c70:	2000012c 	.word	0x2000012c
 8002c74:	20000218 	.word	0x20000218
 8002c78:	20000214 	.word	0x20000214
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <xTaskGetTickCount+0x1c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c8c:	687b      	ldr	r3, [r7, #4]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000208 	.word	0x20000208

08002ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002caa:	4b7d      	ldr	r3, [pc, #500]	; (8002ea0 <xTaskIncrementTick+0x200>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f040 80ec 	bne.w	8002e8c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cb4:	4b7b      	ldr	r3, [pc, #492]	; (8002ea4 <xTaskIncrementTick+0x204>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002cbc:	4a79      	ldr	r2, [pc, #484]	; (8002ea4 <xTaskIncrementTick+0x204>)
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d120      	bne.n	8002d0a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002cc8:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <xTaskIncrementTick+0x208>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	607b      	str	r3, [r7, #4]
    }
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xTaskIncrementTick+0x46>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <xTaskIncrementTick+0x208>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <xTaskIncrementTick+0x20c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6d      	ldr	r2, [pc, #436]	; (8002ea8 <xTaskIncrementTick+0x208>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4a6d      	ldr	r2, [pc, #436]	; (8002eac <xTaskIncrementTick+0x20c>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <xTaskIncrementTick+0x210>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3301      	adds	r3, #1
 8002d02:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <xTaskIncrementTick+0x210>)
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	f000 fb9b 	bl	8003440 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <xTaskIncrementTick+0x214>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f0c0 80a6 	bcc.w	8002e62 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d16:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <xTaskIncrementTick+0x208>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d20:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <xTaskIncrementTick+0x214>)
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295
 8002d26:	601a      	str	r2, [r3, #0]
                    break;
 8002d28:	e09b      	b.n	8002e62 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <xTaskIncrementTick+0x208>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d3a:	6a3a      	ldr	r2, [r7, #32]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d203      	bcs.n	8002d4a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d42:	4a5c      	ldr	r2, [pc, #368]	; (8002eb4 <xTaskIncrementTick+0x214>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d48:	e08b      	b.n	8002e62 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	68d2      	ldr	r2, [r2, #12]
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d103      	bne.n	8002d78 <xTaskIncrementTick+0xd8>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01e      	beq.n	8002dce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	6a12      	ldr	r2, [r2, #32]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	69d2      	ldr	r2, [r2, #28]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3318      	adds	r3, #24
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d103      	bne.n	8002dbe <xTaskIncrementTick+0x11e>
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <xTaskIncrementTick+0x218>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	4a36      	ldr	r2, [pc, #216]	; (8002eb8 <xTaskIncrementTick+0x218>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4935      	ldr	r1, [pc, #212]	; (8002ebc <xTaskIncrementTick+0x21c>)
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3304      	adds	r3, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	3204      	adds	r2, #4
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1d1a      	adds	r2, r3, #4
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <xTaskIncrementTick+0x21c>)
 8002e24:	441a      	add	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2e:	4923      	ldr	r1, [pc, #140]	; (8002ebc <xTaskIncrementTick+0x21c>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	1c59      	adds	r1, r3, #1
 8002e3e:	481f      	ldr	r0, [pc, #124]	; (8002ebc <xTaskIncrementTick+0x21c>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4403      	add	r3, r0
 8002e4a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <xTaskIncrementTick+0x220>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	429a      	cmp	r2, r3
 8002e58:	f4ff af5d 	bcc.w	8002d16 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e60:	e759      	b.n	8002d16 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <xTaskIncrementTick+0x220>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	4914      	ldr	r1, [pc, #80]	; (8002ebc <xTaskIncrementTick+0x21c>)
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d901      	bls.n	8002e7e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <xTaskIncrementTick+0x224>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e004      	b.n	8002e96 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <xTaskIncrementTick+0x228>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <xTaskIncrementTick+0x228>)
 8002e94:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	2000022c 	.word	0x2000022c
 8002ea4:	20000208 	.word	0x20000208
 8002ea8:	200001bc 	.word	0x200001bc
 8002eac:	200001c0 	.word	0x200001c0
 8002eb0:	2000021c 	.word	0x2000021c
 8002eb4:	20000224 	.word	0x20000224
 8002eb8:	2000020c 	.word	0x2000020c
 8002ebc:	20000130 	.word	0x20000130
 8002ec0:	2000012c 	.word	0x2000012c
 8002ec4:	20000218 	.word	0x20000218
 8002ec8:	20000214 	.word	0x20000214

08002ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ed2:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <vTaskSwitchContext+0xa4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <vTaskSwitchContext+0xa8>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002ee0:	e03f      	b.n	8002f62 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <vTaskSwitchContext+0xa8>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <vTaskSwitchContext+0xac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f1c3 031f 	rsb	r3, r3, #31
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	491f      	ldr	r1, [pc, #124]	; (8002f7c <vTaskSwitchContext+0xb0>)
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	607b      	str	r3, [r7, #4]
    }
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <vTaskSwitchContext+0x5a>
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <vTaskSwitchContext+0xb0>)
 8002f34:	4413      	add	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d104      	bne.n	8002f58 <vTaskSwitchContext+0x8c>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <vTaskSwitchContext+0xb4>)
 8002f60:	6013      	str	r3, [r2, #0]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2000022c 	.word	0x2000022c
 8002f74:	20000218 	.word	0x20000218
 8002f78:	2000020c 	.word	0x2000020c
 8002f7c:	20000130 	.word	0x20000130
 8002f80:	2000012c 	.word	0x2000012c

08002f84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60fb      	str	r3, [r7, #12]
    }
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <vTaskPlaceOnEventList+0x44>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3318      	adds	r3, #24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff f837 	bl	8002026 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fb8:	2101      	movs	r1, #1
 8002fba:	6838      	ldr	r0, [r7, #0]
 8002fbc:	f000 fa7a 	bl	80034b4 <prvAddCurrentTaskToDelayedList>
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	2000012c 	.word	0x2000012c

08002fcc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	613b      	str	r3, [r7, #16]
    }
 8002ff0:	bf00      	nop
 8002ff2:	e7fe      	b.n	8002ff2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	61da      	str	r2, [r3, #28]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <vTaskPlaceOnEventListRestricted+0x88>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	621a      	str	r2, [r3, #32]
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <vTaskPlaceOnEventListRestricted+0x88>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	3218      	adds	r2, #24
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <vTaskPlaceOnEventListRestricted+0x88>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f103 0218 	add.w	r2, r3, #24
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <vTaskPlaceOnEventListRestricted+0x88>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800303c:	f04f 33ff 	mov.w	r3, #4294967295
 8003040:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f000 fa35 	bl	80034b4 <prvAddCurrentTaskToDelayedList>
    }
 800304a:	bf00      	nop
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000012c 	.word	0x2000012c

08003058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003058:	b480      	push	{r7}
 800305a:	b08b      	sub	sp, #44	; 0x2c
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	60fb      	str	r3, [r7, #12]
    }
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	6a12      	ldr	r2, [r2, #32]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	69d2      	ldr	r2, [r2, #28]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	3318      	adds	r3, #24
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d103      	bne.n	80030b2 <xTaskRemoveFromEventList+0x5a>
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	6a1a      	ldr	r2, [r3, #32]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	1e5a      	subs	r2, r3, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <xTaskRemoveFromEventList+0x194>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d15e      	bne.n	8003188 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	3304      	adds	r3, #4
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d103      	bne.n	80030f8 <xTaskRemoveFromEventList+0xa0>
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <xTaskRemoveFromEventList+0x198>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	4a36      	ldr	r2, [pc, #216]	; (80031f0 <xTaskRemoveFromEventList+0x198>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	4935      	ldr	r1, [pc, #212]	; (80031f4 <xTaskRemoveFromEventList+0x19c>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3304      	adds	r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	3204      	adds	r2, #4
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <xTaskRemoveFromEventList+0x19c>)
 800315e:	441a      	add	r2, r3
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	615a      	str	r2, [r3, #20]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4922      	ldr	r1, [pc, #136]	; (80031f4 <xTaskRemoveFromEventList+0x19c>)
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	481e      	ldr	r0, [pc, #120]	; (80031f4 <xTaskRemoveFromEventList+0x19c>)
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4403      	add	r3, r0
 8003184:	6019      	str	r1, [r3, #0]
 8003186:	e01b      	b.n	80031c0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <xTaskRemoveFromEventList+0x1a0>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	61da      	str	r2, [r3, #28]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	621a      	str	r2, [r3, #32]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	3218      	adds	r2, #24
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f103 0218 	add.w	r2, r3, #24
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <xTaskRemoveFromEventList+0x1a0>)
 80031b4:	629a      	str	r2, [r3, #40]	; 0x28
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <xTaskRemoveFromEventList+0x1a0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <xTaskRemoveFromEventList+0x1a0>)
 80031be:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <xTaskRemoveFromEventList+0x1a4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d905      	bls.n	80031da <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <xTaskRemoveFromEventList+0x1a8>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e001      	b.n	80031de <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	372c      	adds	r7, #44	; 0x2c
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	2000022c 	.word	0x2000022c
 80031f0:	2000020c 	.word	0x2000020c
 80031f4:	20000130 	.word	0x20000130
 80031f8:	200001c4 	.word	0x200001c4
 80031fc:	2000012c 	.word	0x2000012c
 8003200:	20000218 	.word	0x20000218

08003204 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <vTaskInternalSetTimeOutState+0x24>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <vTaskInternalSetTimeOutState+0x28>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	605a      	str	r2, [r3, #4]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	2000021c 	.word	0x2000021c
 800322c:	20000208 	.word	0x20000208

08003230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	613b      	str	r3, [r7, #16]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	60fb      	str	r3, [r7, #12]
    }
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003272:	f000 fd51 	bl	8003d18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <xTaskCheckForTimeOut+0xc4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d102      	bne.n	8003296 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e026      	b.n	80032e4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <xTaskCheckForTimeOut+0xc8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d00a      	beq.n	80032b8 <xTaskCheckForTimeOut+0x88>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d305      	bcc.n	80032b8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e015      	b.n	80032e4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20b      	bcs.n	80032da <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad2      	subs	r2, r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff98 	bl	8003204 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	e004      	b.n	80032e4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80032e4:	f000 fd48 	bl	8003d78 <vPortExitCritical>

    return xReturn;
 80032e8:	69fb      	ldr	r3, [r7, #28]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000208 	.word	0x20000208
 80032f8:	2000021c 	.word	0x2000021c

080032fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <vTaskMissedYield+0x14>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	20000218 	.word	0x20000218

08003314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800331c:	f000 f852 	bl	80033c4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <prvIdleTask+0x28>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d9f9      	bls.n	800331c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <prvIdleTask+0x2c>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003338:	e7f0      	b.n	800331c <prvIdleTask+0x8>
 800333a:	bf00      	nop
 800333c:	20000130 	.word	0x20000130
 8003340:	e000ed04 	.word	0xe000ed04

08003344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	e00c      	b.n	800336a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <prvInitialiseTaskLists+0x60>)
 800335c:	4413      	add	r3, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fe34 	bl	8001fcc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3301      	adds	r3, #1
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d9ef      	bls.n	8003350 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003370:	480d      	ldr	r0, [pc, #52]	; (80033a8 <prvInitialiseTaskLists+0x64>)
 8003372:	f7fe fe2b 	bl	8001fcc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <prvInitialiseTaskLists+0x68>)
 8003378:	f7fe fe28 	bl	8001fcc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800337c:	480c      	ldr	r0, [pc, #48]	; (80033b0 <prvInitialiseTaskLists+0x6c>)
 800337e:	f7fe fe25 	bl	8001fcc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003382:	480c      	ldr	r0, [pc, #48]	; (80033b4 <prvInitialiseTaskLists+0x70>)
 8003384:	f7fe fe22 	bl	8001fcc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <prvInitialiseTaskLists+0x74>)
 800338a:	f7fe fe1f 	bl	8001fcc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <prvInitialiseTaskLists+0x78>)
 8003390:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <prvInitialiseTaskLists+0x64>)
 8003392:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <prvInitialiseTaskLists+0x7c>)
 8003396:	4a05      	ldr	r2, [pc, #20]	; (80033ac <prvInitialiseTaskLists+0x68>)
 8003398:	601a      	str	r2, [r3, #0]
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000130 	.word	0x20000130
 80033a8:	20000194 	.word	0x20000194
 80033ac:	200001a8 	.word	0x200001a8
 80033b0:	200001c4 	.word	0x200001c4
 80033b4:	200001d8 	.word	0x200001d8
 80033b8:	200001f0 	.word	0x200001f0
 80033bc:	200001bc 	.word	0x200001bc
 80033c0:	200001c0 	.word	0x200001c0

080033c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033ca:	e019      	b.n	8003400 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80033cc:	f000 fca4 	bl	8003d18 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <prvCheckTasksWaitingTermination+0x50>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fe5b 	bl	8002098 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <prvCheckTasksWaitingTermination+0x54>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <prvCheckTasksWaitingTermination+0x54>)
 80033ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <prvCheckTasksWaitingTermination+0x58>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <prvCheckTasksWaitingTermination+0x58>)
 80033f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80033f6:	f000 fcbf 	bl	8003d78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f810 	bl	8003420 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <prvCheckTasksWaitingTermination+0x58>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e1      	bne.n	80033cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200001d8 	.word	0x200001d8
 8003418:	20000204 	.word	0x20000204
 800341c:	200001ec 	.word	0x200001ec

08003420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fe35 	bl	800409c <vPortFree>
                vPortFree( pxTCB );
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fe32 	bl	800409c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <prvResetNextTaskUnblockTime+0x30>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <prvResetNextTaskUnblockTime+0x34>)
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003456:	e005      	b.n	8003464 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <prvResetNextTaskUnblockTime+0x30>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <prvResetNextTaskUnblockTime+0x34>)
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200001bc 	.word	0x200001bc
 8003474:	20000224 	.word	0x20000224

08003478 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <xTaskGetSchedulerState+0x34>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003486:	2301      	movs	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	e008      	b.n	800349e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <xTaskGetSchedulerState+0x38>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003494:	2302      	movs	r3, #2
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e001      	b.n	800349e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800349a:	2300      	movs	r3, #0
 800349c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800349e:	687b      	ldr	r3, [r7, #4]
    }
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	20000210 	.word	0x20000210
 80034b0:	2000022c 	.word	0x2000022c

080034b4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <prvAddCurrentTaskToDelayedList+0xe4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c4:	4b35      	ldr	r3, [pc, #212]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fde4 	bl	8002098 <uxListRemove>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80034d6:	4b31      	ldr	r3, [pc, #196]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	2201      	movs	r2, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4013      	ands	r3, r2
 80034ea:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <prvAddCurrentTaskToDelayedList+0xec>)
 80034ec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d124      	bne.n	8003540 <prvAddCurrentTaskToDelayedList+0x8c>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d021      	beq.n	8003540 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034fc:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	4b26      	ldr	r3, [pc, #152]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	6892      	ldr	r2, [r2, #8]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	4b21      	ldr	r3, [pc, #132]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	3204      	adds	r2, #4
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	1d1a      	adds	r2, r3, #4
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	4b1c      	ldr	r3, [pc, #112]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003530:	615a      	str	r2, [r3, #20]
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3301      	adds	r3, #1
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800353e:	e026      	b.n	800358e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d209      	bcs.n	800356c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3304      	adds	r3, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4610      	mov	r0, r2
 8003566:	f7fe fd5e 	bl	8002026 <vListInsert>
}
 800356a:	e010      	b.n	800358e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <prvAddCurrentTaskToDelayedList+0xf8>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fe fd54 	bl	8002026 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800357e:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d202      	bcs.n	800358e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8003588:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6013      	str	r3, [r2, #0]
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000208 	.word	0x20000208
 800359c:	2000012c 	.word	0x2000012c
 80035a0:	2000020c 	.word	0x2000020c
 80035a4:	200001f0 	.word	0x200001f0
 80035a8:	200001c0 	.word	0x200001c0
 80035ac:	200001bc 	.word	0x200001bc
 80035b0:	20000224 	.word	0x20000224

080035b4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80035be:	f000 fa47 	bl	8003a50 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <xTimerCreateTimerTask+0x54>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <xTimerCreateTimerTask+0x58>)
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d8:	490d      	ldr	r1, [pc, #52]	; (8003610 <xTimerCreateTimerTask+0x5c>)
 80035da:	480e      	ldr	r0, [pc, #56]	; (8003614 <xTimerCreateTimerTask+0x60>)
 80035dc:	f7ff f878 	bl	80026d0 <xTaskCreate>
 80035e0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	603b      	str	r3, [r7, #0]
    }
 80035fa:	bf00      	nop
 80035fc:	e7fe      	b.n	80035fc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80035fe:	687b      	ldr	r3, [r7, #4]
    }
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000260 	.word	0x20000260
 800360c:	20000264 	.word	0x20000264
 8003610:	08004c88 	.word	0x08004c88
 8003614:	080036bd 	.word	0x080036bd

08003618 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003624:	e008      	b.n	8003638 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	18d1      	adds	r1, r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f8dd 	bl	8003804 <prvInsertTimerInActiveList>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ea      	bne.n	8003626 <prvReloadTimer+0xe>
        }
    }
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <prvProcessExpiredTimer+0x5c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3304      	adds	r3, #4
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fd0f 	bl	8002098 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ffc3 	bl	8003618 <prvReloadTimer>
 8003692:	e008      	b.n	80036a6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	4798      	blx	r3
    }
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000258 	.word	0x20000258

080036bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f857 	bl	800377c <prvGetNextExpireTime>
 80036ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4619      	mov	r1, r3
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f803 	bl	80036e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80036da:	f000 f8d5 	bl	8003888 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036de:	e7f1      	b.n	80036c4 <prvTimerTask+0x8>

080036e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80036ea:	f7ff f9bf 	bl	8002a6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f866 	bl	80037c4 <prvSampleTimeNow>
 80036f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d130      	bne.n	8003762 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <prvProcessTimerOrBlockTask+0x3c>
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	429a      	cmp	r2, r3
 800370c:	d806      	bhi.n	800371c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800370e:	f7ff f9bb 	bl	8002a88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ffa1 	bl	800365c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800371a:	e024      	b.n	8003766 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <prvProcessTimerOrBlockTask+0x90>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <prvProcessTimerOrBlockTask+0x50>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <prvProcessTimerOrBlockTask+0x52>
 8003730:	2300      	movs	r3, #0
 8003732:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <prvProcessTimerOrBlockTask+0x94>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	f7fe ff91 	bl	8002668 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003746:	f7ff f99f 	bl	8002a88 <xTaskResumeAll>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <prvProcessTimerOrBlockTask+0x98>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
    }
 8003760:	e001      	b.n	8003766 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003762:	f7ff f991 	bl	8002a88 <xTaskResumeAll>
    }
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	2000025c 	.word	0x2000025c
 8003774:	20000260 	.word	0x20000260
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <prvGetNextExpireTime+0x44>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <prvGetNextExpireTime+0x16>
 800378e:	2201      	movs	r2, #1
 8003790:	e000      	b.n	8003794 <prvGetNextExpireTime+0x18>
 8003792:	2200      	movs	r2, #0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d105      	bne.n	80037ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <prvGetNextExpireTime+0x44>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e001      	b.n	80037b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80037b0:	68fb      	ldr	r3, [r7, #12]
    }
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000258 	.word	0x20000258

080037c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80037cc:	f7ff fa58 	bl	8002c80 <xTaskGetTickCount>
 80037d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <prvSampleTimeNow+0x3c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d205      	bcs.n	80037e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80037dc:	f000 f912 	bl	8003a04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e002      	b.n	80037ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <prvSampleTimeNow+0x3c>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80037f4:	68fb      	ldr	r3, [r7, #12]
    }
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000268 	.word	0x20000268

08003804 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d812      	bhi.n	8003850 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad2      	subs	r2, r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e01b      	b.n	8003876 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <prvInsertTimerInActiveList+0x7c>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe fbec 	bl	8002026 <vListInsert>
 800384e:	e012      	b.n	8003876 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d206      	bcs.n	8003866 <prvInsertTimerInActiveList+0x62>
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	e007      	b.n	8003876 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <prvInsertTimerInActiveList+0x80>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f7fe fbd8 	bl	8002026 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003876:	697b      	ldr	r3, [r7, #20]
    }
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	2000025c 	.word	0x2000025c
 8003884:	20000258 	.word	0x20000258

08003888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800388e:	e0a6      	b.n	80039de <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f2c0 80a2 	blt.w	80039dc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fbf5 	bl	8002098 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff87 	bl	80037c4 <prvSampleTimeNow>
 80038b6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	2b08      	cmp	r3, #8
 80038be:	f200 808e 	bhi.w	80039de <prvProcessReceivedCommands+0x156>
 80038c2:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <prvProcessReceivedCommands+0x40>)
 80038c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c8:	080038ed 	.word	0x080038ed
 80038cc:	080038ed 	.word	0x080038ed
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003969 	.word	0x08003969
 80038d8:	080039b3 	.word	0x080039b3
 80038dc:	080038ed 	.word	0x080038ed
 80038e0:	080038ed 	.word	0x080038ed
 80038e4:	08003955 	.word	0x08003955
 80038e8:	08003969 	.word	0x08003969
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	18d1      	adds	r1, r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	69f8      	ldr	r0, [r7, #28]
 800390c:	f7ff ff7a 	bl	8003804 <prvInsertTimerInActiveList>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d063      	beq.n	80039de <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	4413      	add	r3, r2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4619      	mov	r1, r3
 8003930:	69f8      	ldr	r0, [r7, #28]
 8003932:	f7ff fe71 	bl	8003618 <prvReloadTimer>
 8003936:	e008      	b.n	800394a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	69f8      	ldr	r0, [r7, #28]
 8003950:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003952:	e044      	b.n	80039de <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003966:	e03a      	b.n	80039de <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	617b      	str	r3, [r7, #20]
    }
 800399a:	bf00      	nop
 800399c:	e7fe      	b.n	800399c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	18d1      	adds	r1, r2, r3
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	69f8      	ldr	r0, [r7, #28]
 80039ac:	f7ff ff2a 	bl	8003804 <prvInsertTimerInActiveList>
                        break;
 80039b0:	e015      	b.n	80039de <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80039c0:	69f8      	ldr	r0, [r7, #28]
 80039c2:	f000 fb6b 	bl	800409c <vPortFree>
 80039c6:	e00a      	b.n	80039de <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80039da:	e000      	b.n	80039de <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80039dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <prvProcessReceivedCommands+0x178>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f107 0108 	add.w	r1, r7, #8
 80039e6:	2200      	movs	r2, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fc81 	bl	80022f0 <xQueueReceive>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f47f af4d 	bne.w	8003890 <prvProcessReceivedCommands+0x8>
        }
    }
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000260 	.word	0x20000260

08003a04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a0a:	e009      	b.n	8003a20 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <prvSwitchTimerLists+0x44>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a16:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1a:	6838      	ldr	r0, [r7, #0]
 8003a1c:	f7ff fe1e 	bl	800365c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <prvSwitchTimerLists+0x44>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <prvSwitchTimerLists+0x44>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <prvSwitchTimerLists+0x48>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <prvSwitchTimerLists+0x44>)
 8003a36:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <prvSwitchTimerLists+0x48>)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6013      	str	r3, [r2, #0]
    }
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	20000258 	.word	0x20000258
 8003a4c:	2000025c 	.word	0x2000025c

08003a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003a54:	f000 f960 	bl	8003d18 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <prvCheckForValidListAndQueue+0x54>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11d      	bne.n	8003a9c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003a60:	4811      	ldr	r0, [pc, #68]	; (8003aa8 <prvCheckForValidListAndQueue+0x58>)
 8003a62:	f7fe fab3 	bl	8001fcc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003a66:	4811      	ldr	r0, [pc, #68]	; (8003aac <prvCheckForValidListAndQueue+0x5c>)
 8003a68:	f7fe fab0 	bl	8001fcc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <prvCheckForValidListAndQueue+0x60>)
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <prvCheckForValidListAndQueue+0x58>)
 8003a70:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <prvCheckForValidListAndQueue+0x64>)
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <prvCheckForValidListAndQueue+0x5c>)
 8003a76:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a78:	2200      	movs	r2, #0
 8003a7a:	210c      	movs	r1, #12
 8003a7c:	200a      	movs	r0, #10
 8003a7e:	f7fe fbc5 	bl	800220c <xQueueGenericCreate>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <prvCheckForValidListAndQueue+0x54>)
 8003a86:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <prvCheckForValidListAndQueue+0x54>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <prvCheckForValidListAndQueue+0x54>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <prvCheckForValidListAndQueue+0x68>)
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fd98 	bl	80025cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a9c:	f000 f96c 	bl	8003d78 <vPortExitCritical>
    }
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000260 	.word	0x20000260
 8003aa8:	20000230 	.word	0x20000230
 8003aac:	20000244 	.word	0x20000244
 8003ab0:	20000258 	.word	0x20000258
 8003ab4:	2000025c 	.word	0x2000025c
 8003ab8:	08004c90 	.word	0x08004c90

08003abc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b04      	subs	r3, #4
 8003acc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ad4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3b04      	subs	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3b04      	subs	r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003aec:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <pxPortInitialiseStack+0x64>)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3b14      	subs	r3, #20
 8003af6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3b04      	subs	r3, #4
 8003b02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f06f 0202 	mvn.w	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b20      	subs	r3, #32
 8003b10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	08003b25 	.word	0x08003b25

08003b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <prvTaskExitError+0x54>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d00a      	beq.n	8003b4e <prvTaskExitError+0x2a>
        __asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	60fb      	str	r3, [r7, #12]
    }
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <prvTaskExitError+0x28>
        __asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60bb      	str	r3, [r7, #8]
    }
 8003b60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003b62:	bf00      	nop
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0fc      	beq.n	8003b64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20000014 	.word	0x20000014
 8003b7c:	00000000 	.word	0x00000000

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	2000012c 	.word	0x2000012c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <prvPortStartFirstTask+0x24>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f380 8814 	msr	CONTROL, r0
 8003bba:	b662      	cpsie	i
 8003bbc:	b661      	cpsie	f
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	df00      	svc	0
 8003bc8:	bf00      	nop
 8003bca:	0000      	.short	0x0000
 8003bcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop

08003bd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003bda:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <xPortStartScheduler+0x120>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a46      	ldr	r2, [pc, #280]	; (8003cf8 <xPortStartScheduler+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10a      	bne.n	8003bfa <xPortStartScheduler+0x26>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <xPortStartScheduler+0x120>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <xPortStartScheduler+0x128>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d10a      	bne.n	8003c1a <xPortStartScheduler+0x46>
        __asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
    }
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <xPortStartScheduler+0x12c>)
 8003c1c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	22ff      	movs	r2, #255	; 0xff
 8003c2a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <xPortStartScheduler+0x130>)
 8003c40:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c48:	e009      	b.n	8003c5e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c52:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d0ef      	beq.n	8003c4a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c6a:	4b27      	ldr	r3, [pc, #156]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00a      	beq.n	8003c8c <xPortStartScheduler+0xb8>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60bb      	str	r3, [r7, #8]
    }
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c94:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <xPortStartScheduler+0x134>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <xPortStartScheduler+0x134>)
 8003ca0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <xPortStartScheduler+0x138>)
 8003cbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003cc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003cc2:	f000 f8db 	bl	8003e7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <xPortStartScheduler+0x13c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ccc:	f000 f8fa 	bl	8003ec4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <xPortStartScheduler+0x140>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <xPortStartScheduler+0x140>)
 8003cd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003cda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003cdc:	f7ff ff64 	bl	8003ba8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ce0:	f7ff f8f4 	bl	8002ecc <vTaskSwitchContext>
    prvTaskExitError();
 8003ce4:	f7ff ff1e 	bl	8003b24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00
 8003cf8:	410fc271 	.word	0x410fc271
 8003cfc:	410fc270 	.word	0x410fc270
 8003d00:	e000e400 	.word	0xe000e400
 8003d04:	2000026c 	.word	0x2000026c
 8003d08:	20000270 	.word	0x20000270
 8003d0c:	e000ed20 	.word	0xe000ed20
 8003d10:	20000014 	.word	0x20000014
 8003d14:	e000ef34 	.word	0xe000ef34

08003d18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
    }
 8003d30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <vPortEnterCritical+0x58>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <vPortEnterCritical+0x58>)
 8003d3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <vPortEnterCritical+0x58>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10f      	bne.n	8003d64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <vPortEnterCritical+0x5c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	603b      	str	r3, [r7, #0]
    }
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <vPortEnterCritical+0x4a>
    }
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000014 	.word	0x20000014
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <vPortExitCritical+0x50>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <vPortExitCritical+0x24>
        __asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	607b      	str	r3, [r7, #4]
    }
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <vPortExitCritical+0x50>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <vPortExitCritical+0x50>)
 8003da4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <vPortExitCritical+0x50>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d105      	bne.n	8003dba <vPortExitCritical+0x42>
 8003dae:	2300      	movs	r3, #0
 8003db0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003db8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000014 	.word	0x20000014
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003dd0:	f3ef 8009 	mrs	r0, PSP
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <pxCurrentTCBConst>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	f01e 0f10 	tst.w	lr, #16
 8003de0:	bf08      	it	eq
 8003de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003df4:	f380 8811 	msr	BASEPRI, r0
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f7ff f864 	bl	8002ecc <vTaskSwitchContext>
 8003e04:	f04f 0000 	mov.w	r0, #0
 8003e08:	f380 8811 	msr	BASEPRI, r0
 8003e0c:	bc09      	pop	{r0, r3}
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e16:	f01e 0f10 	tst.w	lr, #16
 8003e1a:	bf08      	it	eq
 8003e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e20:	f380 8809 	msr	PSP, r0
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst>:
 8003e30:	2000012c 	.word	0x2000012c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
    }
 8003e50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f7fe ff25 	bl	8002ca0 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <SysTick_Handler+0x40>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f383 8811 	msr	BASEPRI, r3
    }
 8003e6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <vPortSetupTimerInterrupt+0x38>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <vPortSetupTimerInterrupt+0x3c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <vPortSetupTimerInterrupt+0x40>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <vPortSetupTimerInterrupt+0x44>)
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9e:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <vPortSetupTimerInterrupt+0x34>)
 8003ea0:	2207      	movs	r2, #7
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	e000e010 	.word	0xe000e010
 8003eb4:	e000e018 	.word	0xe000e018
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	10624dd3 	.word	0x10624dd3
 8003ec0:	e000e014 	.word	0xe000e014

08003ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ed4 <vPortEnableVFP+0x10>
 8003ec8:	6801      	ldr	r1, [r0, #0]
 8003eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ece:	6001      	str	r1, [r0, #0]
 8003ed0:	4770      	bx	lr
 8003ed2:	0000      	.short	0x0000
 8003ed4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop

08003edc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003ee8:	f7fe fdc0 	bl	8002a6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003eec:	4b65      	ldr	r3, [pc, #404]	; (8004084 <pvPortMalloc+0x1a8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003ef4:	f000 f934 	bl	8004160 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ef8:	4b63      	ldr	r3, [pc, #396]	; (8004088 <pvPortMalloc+0x1ac>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 80a7 	bne.w	8004054 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02d      	beq.n	8003f68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d227      	bcs.n	8003f68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003f18:	2208      	movs	r2, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d021      	beq.n	8003f6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	3308      	adds	r3, #8
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d214      	bcs.n	8003f62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	3308      	adds	r3, #8
 8003f40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <pvPortMalloc+0x92>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	617b      	str	r3, [r7, #20]
    }
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f66:	e002      	b.n	8003f6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	e000      	b.n	8003f70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d06e      	beq.n	8004054 <pvPortMalloc+0x178>
 8003f76:	4b45      	ldr	r3, [pc, #276]	; (800408c <pvPortMalloc+0x1b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d869      	bhi.n	8004054 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <pvPortMalloc+0x1b4>)
 8003f82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <pvPortMalloc+0x1b4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f8a:	e004      	b.n	8003f96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d903      	bls.n	8003fa8 <pvPortMalloc+0xcc>
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f1      	bne.n	8003f8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <pvPortMalloc+0x1a8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d050      	beq.n	8004054 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2208      	movs	r2, #8
 8003fb8:	4413      	add	r3, r2
 8003fba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	2308      	movs	r3, #8
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d91f      	bls.n	8004014 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <pvPortMalloc+0x120>
        __asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	613b      	str	r3, [r7, #16]
    }
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800400e:	69b8      	ldr	r0, [r7, #24]
 8004010:	f000 f908 	bl	8004224 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004014:	4b1d      	ldr	r3, [pc, #116]	; (800408c <pvPortMalloc+0x1b0>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	4a1b      	ldr	r2, [pc, #108]	; (800408c <pvPortMalloc+0x1b0>)
 8004020:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <pvPortMalloc+0x1b0>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <pvPortMalloc+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d203      	bcs.n	8004036 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800402e:	4b17      	ldr	r3, [pc, #92]	; (800408c <pvPortMalloc+0x1b0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a18      	ldr	r2, [pc, #96]	; (8004094 <pvPortMalloc+0x1b8>)
 8004034:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <pvPortMalloc+0x1ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	431a      	orrs	r2, r3
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <pvPortMalloc+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	4a11      	ldr	r2, [pc, #68]	; (8004098 <pvPortMalloc+0x1bc>)
 8004052:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004054:	f7fe fd18 	bl	8002a88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <pvPortMalloc+0x19c>
        __asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
    }
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <pvPortMalloc+0x19a>
    return pvReturn;
 8004078:	69fb      	ldr	r3, [r7, #28]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20012e7c 	.word	0x20012e7c
 8004088:	20012e90 	.word	0x20012e90
 800408c:	20012e80 	.word	0x20012e80
 8004090:	20012e74 	.word	0x20012e74
 8004094:	20012e84 	.word	0x20012e84
 8004098:	20012e88 	.word	0x20012e88

0800409c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04d      	beq.n	800414a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040ae:	2308      	movs	r3, #8
 80040b0:	425b      	negs	r3, r3
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4b24      	ldr	r3, [pc, #144]	; (8004154 <vPortFree+0xb8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <vPortFree+0x44>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	60fb      	str	r3, [r7, #12]
    }
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <vPortFree+0x62>
        __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60bb      	str	r3, [r7, #8]
    }
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <vPortFree+0xb8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01e      	beq.n	800414a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11a      	bne.n	800414a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <vPortFree+0xb8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	43db      	mvns	r3, r3
 800411e:	401a      	ands	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004124:	f7fe fca2 	bl	8002a6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <vPortFree+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4413      	add	r3, r2
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <vPortFree+0xbc>)
 8004134:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004136:	6938      	ldr	r0, [r7, #16]
 8004138:	f000 f874 	bl	8004224 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <vPortFree+0xc0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a06      	ldr	r2, [pc, #24]	; (800415c <vPortFree+0xc0>)
 8004144:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004146:	f7fe fc9f 	bl	8002a88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20012e90 	.word	0x20012e90
 8004158:	20012e80 	.word	0x20012e80
 800415c:	20012e8c 	.word	0x20012e8c

08004160 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004166:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800416a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800416c:	4b27      	ldr	r3, [pc, #156]	; (800420c <prvHeapInit+0xac>)
 800416e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3307      	adds	r3, #7
 800417e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	4a1f      	ldr	r2, [pc, #124]	; (800420c <prvHeapInit+0xac>)
 8004190:	4413      	add	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004198:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <prvHeapInit+0xb0>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800419e:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <prvHeapInit+0xb0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041ac:	2208      	movs	r2, #8
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <prvHeapInit+0xb4>)
 80041c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041c2:	4b14      	ldr	r3, [pc, #80]	; (8004214 <prvHeapInit+0xb4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <prvHeapInit+0xb4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <prvHeapInit+0xb4>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <prvHeapInit+0xb8>)
 80041ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <prvHeapInit+0xbc>)
 80041f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <prvHeapInit+0xc0>)
 80041fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	20000274 	.word	0x20000274
 8004210:	20012e74 	.word	0x20012e74
 8004214:	20012e7c 	.word	0x20012e7c
 8004218:	20012e84 	.word	0x20012e84
 800421c:	20012e80 	.word	0x20012e80
 8004220:	20012e90 	.word	0x20012e90

08004224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <prvInsertBlockIntoFreeList+0xac>)
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e002      	b.n	8004238 <prvInsertBlockIntoFreeList+0x14>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	d8f7      	bhi.n	8004232 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4413      	add	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d108      	bne.n	8004266 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	441a      	add	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	441a      	add	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d118      	bne.n	80042ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <prvInsertBlockIntoFreeList+0xb0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d00d      	beq.n	80042a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e008      	b.n	80042b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <prvInsertBlockIntoFreeList+0xb0>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e003      	b.n	80042b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d002      	beq.n	80042c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20012e74 	.word	0x20012e74
 80042d4:	20012e7c 	.word	0x20012e7c

080042d8 <__errno>:
 80042d8:	4b01      	ldr	r3, [pc, #4]	; (80042e0 <__errno+0x8>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000018 	.word	0x20000018

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f000 fc8e 	bl	8004c18 <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004cec 	.word	0x08004cec
 8004320:	08004cec 	.word	0x08004cec
 8004324:	08004cec 	.word	0x08004cec
 8004328:	08004cf0 	.word	0x08004cf0

0800432c <memcpy>:
 800432c:	440a      	add	r2, r1
 800432e:	4291      	cmp	r1, r2
 8004330:	f100 33ff 	add.w	r3, r0, #4294967295
 8004334:	d100      	bne.n	8004338 <memcpy+0xc>
 8004336:	4770      	bx	lr
 8004338:	b510      	push	{r4, lr}
 800433a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004342:	4291      	cmp	r1, r2
 8004344:	d1f9      	bne.n	800433a <memcpy+0xe>
 8004346:	bd10      	pop	{r4, pc}

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <_vsiprintf_r>:
 8004358:	b500      	push	{lr}
 800435a:	b09b      	sub	sp, #108	; 0x6c
 800435c:	9100      	str	r1, [sp, #0]
 800435e:	9104      	str	r1, [sp, #16]
 8004360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004364:	9105      	str	r1, [sp, #20]
 8004366:	9102      	str	r1, [sp, #8]
 8004368:	4905      	ldr	r1, [pc, #20]	; (8004380 <_vsiprintf_r+0x28>)
 800436a:	9103      	str	r1, [sp, #12]
 800436c:	4669      	mov	r1, sp
 800436e:	f000 f86f 	bl	8004450 <_svfiprintf_r>
 8004372:	9b00      	ldr	r3, [sp, #0]
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	b01b      	add	sp, #108	; 0x6c
 800437a:	f85d fb04 	ldr.w	pc, [sp], #4
 800437e:	bf00      	nop
 8004380:	ffff0208 	.word	0xffff0208

08004384 <vsiprintf>:
 8004384:	4613      	mov	r3, r2
 8004386:	460a      	mov	r2, r1
 8004388:	4601      	mov	r1, r0
 800438a:	4802      	ldr	r0, [pc, #8]	; (8004394 <vsiprintf+0x10>)
 800438c:	6800      	ldr	r0, [r0, #0]
 800438e:	f7ff bfe3 	b.w	8004358 <_vsiprintf_r>
 8004392:	bf00      	nop
 8004394:	20000018 	.word	0x20000018

08004398 <__ssputs_r>:
 8004398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800439c:	688e      	ldr	r6, [r1, #8]
 800439e:	429e      	cmp	r6, r3
 80043a0:	4682      	mov	sl, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4690      	mov	r8, r2
 80043a6:	461f      	mov	r7, r3
 80043a8:	d838      	bhi.n	800441c <__ssputs_r+0x84>
 80043aa:	898a      	ldrh	r2, [r1, #12]
 80043ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043b0:	d032      	beq.n	8004418 <__ssputs_r+0x80>
 80043b2:	6825      	ldr	r5, [r4, #0]
 80043b4:	6909      	ldr	r1, [r1, #16]
 80043b6:	eba5 0901 	sub.w	r9, r5, r1
 80043ba:	6965      	ldr	r5, [r4, #20]
 80043bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043c4:	3301      	adds	r3, #1
 80043c6:	444b      	add	r3, r9
 80043c8:	106d      	asrs	r5, r5, #1
 80043ca:	429d      	cmp	r5, r3
 80043cc:	bf38      	it	cc
 80043ce:	461d      	movcc	r5, r3
 80043d0:	0553      	lsls	r3, r2, #21
 80043d2:	d531      	bpl.n	8004438 <__ssputs_r+0xa0>
 80043d4:	4629      	mov	r1, r5
 80043d6:	f000 fb55 	bl	8004a84 <_malloc_r>
 80043da:	4606      	mov	r6, r0
 80043dc:	b950      	cbnz	r0, 80043f4 <__ssputs_r+0x5c>
 80043de:	230c      	movs	r3, #12
 80043e0:	f8ca 3000 	str.w	r3, [sl]
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f4:	6921      	ldr	r1, [r4, #16]
 80043f6:	464a      	mov	r2, r9
 80043f8:	f7ff ff98 	bl	800432c <memcpy>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004406:	81a3      	strh	r3, [r4, #12]
 8004408:	6126      	str	r6, [r4, #16]
 800440a:	6165      	str	r5, [r4, #20]
 800440c:	444e      	add	r6, r9
 800440e:	eba5 0509 	sub.w	r5, r5, r9
 8004412:	6026      	str	r6, [r4, #0]
 8004414:	60a5      	str	r5, [r4, #8]
 8004416:	463e      	mov	r6, r7
 8004418:	42be      	cmp	r6, r7
 800441a:	d900      	bls.n	800441e <__ssputs_r+0x86>
 800441c:	463e      	mov	r6, r7
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	4632      	mov	r2, r6
 8004422:	4641      	mov	r1, r8
 8004424:	f000 faa8 	bl	8004978 <memmove>
 8004428:	68a3      	ldr	r3, [r4, #8]
 800442a:	1b9b      	subs	r3, r3, r6
 800442c:	60a3      	str	r3, [r4, #8]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	4433      	add	r3, r6
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	2000      	movs	r0, #0
 8004436:	e7db      	b.n	80043f0 <__ssputs_r+0x58>
 8004438:	462a      	mov	r2, r5
 800443a:	f000 fb97 	bl	8004b6c <_realloc_r>
 800443e:	4606      	mov	r6, r0
 8004440:	2800      	cmp	r0, #0
 8004442:	d1e1      	bne.n	8004408 <__ssputs_r+0x70>
 8004444:	6921      	ldr	r1, [r4, #16]
 8004446:	4650      	mov	r0, sl
 8004448:	f000 fab0 	bl	80049ac <_free_r>
 800444c:	e7c7      	b.n	80043de <__ssputs_r+0x46>
	...

08004450 <_svfiprintf_r>:
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	4698      	mov	r8, r3
 8004456:	898b      	ldrh	r3, [r1, #12]
 8004458:	061b      	lsls	r3, r3, #24
 800445a:	b09d      	sub	sp, #116	; 0x74
 800445c:	4607      	mov	r7, r0
 800445e:	460d      	mov	r5, r1
 8004460:	4614      	mov	r4, r2
 8004462:	d50e      	bpl.n	8004482 <_svfiprintf_r+0x32>
 8004464:	690b      	ldr	r3, [r1, #16]
 8004466:	b963      	cbnz	r3, 8004482 <_svfiprintf_r+0x32>
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	f000 fb0b 	bl	8004a84 <_malloc_r>
 800446e:	6028      	str	r0, [r5, #0]
 8004470:	6128      	str	r0, [r5, #16]
 8004472:	b920      	cbnz	r0, 800447e <_svfiprintf_r+0x2e>
 8004474:	230c      	movs	r3, #12
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	e0d1      	b.n	8004622 <_svfiprintf_r+0x1d2>
 800447e:	2340      	movs	r3, #64	; 0x40
 8004480:	616b      	str	r3, [r5, #20]
 8004482:	2300      	movs	r3, #0
 8004484:	9309      	str	r3, [sp, #36]	; 0x24
 8004486:	2320      	movs	r3, #32
 8004488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800448c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004490:	2330      	movs	r3, #48	; 0x30
 8004492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800463c <_svfiprintf_r+0x1ec>
 8004496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800449a:	f04f 0901 	mov.w	r9, #1
 800449e:	4623      	mov	r3, r4
 80044a0:	469a      	mov	sl, r3
 80044a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a6:	b10a      	cbz	r2, 80044ac <_svfiprintf_r+0x5c>
 80044a8:	2a25      	cmp	r2, #37	; 0x25
 80044aa:	d1f9      	bne.n	80044a0 <_svfiprintf_r+0x50>
 80044ac:	ebba 0b04 	subs.w	fp, sl, r4
 80044b0:	d00b      	beq.n	80044ca <_svfiprintf_r+0x7a>
 80044b2:	465b      	mov	r3, fp
 80044b4:	4622      	mov	r2, r4
 80044b6:	4629      	mov	r1, r5
 80044b8:	4638      	mov	r0, r7
 80044ba:	f7ff ff6d 	bl	8004398 <__ssputs_r>
 80044be:	3001      	adds	r0, #1
 80044c0:	f000 80aa 	beq.w	8004618 <_svfiprintf_r+0x1c8>
 80044c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c6:	445a      	add	r2, fp
 80044c8:	9209      	str	r2, [sp, #36]	; 0x24
 80044ca:	f89a 3000 	ldrb.w	r3, [sl]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a2 	beq.w	8004618 <_svfiprintf_r+0x1c8>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f04f 32ff 	mov.w	r2, #4294967295
 80044da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044de:	f10a 0a01 	add.w	sl, sl, #1
 80044e2:	9304      	str	r3, [sp, #16]
 80044e4:	9307      	str	r3, [sp, #28]
 80044e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044ea:	931a      	str	r3, [sp, #104]	; 0x68
 80044ec:	4654      	mov	r4, sl
 80044ee:	2205      	movs	r2, #5
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	4851      	ldr	r0, [pc, #324]	; (800463c <_svfiprintf_r+0x1ec>)
 80044f6:	f7fb fe73 	bl	80001e0 <memchr>
 80044fa:	9a04      	ldr	r2, [sp, #16]
 80044fc:	b9d8      	cbnz	r0, 8004536 <_svfiprintf_r+0xe6>
 80044fe:	06d0      	lsls	r0, r2, #27
 8004500:	bf44      	itt	mi
 8004502:	2320      	movmi	r3, #32
 8004504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004508:	0711      	lsls	r1, r2, #28
 800450a:	bf44      	itt	mi
 800450c:	232b      	movmi	r3, #43	; 0x2b
 800450e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004512:	f89a 3000 	ldrb.w	r3, [sl]
 8004516:	2b2a      	cmp	r3, #42	; 0x2a
 8004518:	d015      	beq.n	8004546 <_svfiprintf_r+0xf6>
 800451a:	9a07      	ldr	r2, [sp, #28]
 800451c:	4654      	mov	r4, sl
 800451e:	2000      	movs	r0, #0
 8004520:	f04f 0c0a 	mov.w	ip, #10
 8004524:	4621      	mov	r1, r4
 8004526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800452a:	3b30      	subs	r3, #48	; 0x30
 800452c:	2b09      	cmp	r3, #9
 800452e:	d94e      	bls.n	80045ce <_svfiprintf_r+0x17e>
 8004530:	b1b0      	cbz	r0, 8004560 <_svfiprintf_r+0x110>
 8004532:	9207      	str	r2, [sp, #28]
 8004534:	e014      	b.n	8004560 <_svfiprintf_r+0x110>
 8004536:	eba0 0308 	sub.w	r3, r0, r8
 800453a:	fa09 f303 	lsl.w	r3, r9, r3
 800453e:	4313      	orrs	r3, r2
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	46a2      	mov	sl, r4
 8004544:	e7d2      	b.n	80044ec <_svfiprintf_r+0x9c>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	1d19      	adds	r1, r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	9103      	str	r1, [sp, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	bfbb      	ittet	lt
 8004552:	425b      	neglt	r3, r3
 8004554:	f042 0202 	orrlt.w	r2, r2, #2
 8004558:	9307      	strge	r3, [sp, #28]
 800455a:	9307      	strlt	r3, [sp, #28]
 800455c:	bfb8      	it	lt
 800455e:	9204      	strlt	r2, [sp, #16]
 8004560:	7823      	ldrb	r3, [r4, #0]
 8004562:	2b2e      	cmp	r3, #46	; 0x2e
 8004564:	d10c      	bne.n	8004580 <_svfiprintf_r+0x130>
 8004566:	7863      	ldrb	r3, [r4, #1]
 8004568:	2b2a      	cmp	r3, #42	; 0x2a
 800456a:	d135      	bne.n	80045d8 <_svfiprintf_r+0x188>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	1d1a      	adds	r2, r3, #4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	bfb8      	it	lt
 8004578:	f04f 33ff 	movlt.w	r3, #4294967295
 800457c:	3402      	adds	r4, #2
 800457e:	9305      	str	r3, [sp, #20]
 8004580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800464c <_svfiprintf_r+0x1fc>
 8004584:	7821      	ldrb	r1, [r4, #0]
 8004586:	2203      	movs	r2, #3
 8004588:	4650      	mov	r0, sl
 800458a:	f7fb fe29 	bl	80001e0 <memchr>
 800458e:	b140      	cbz	r0, 80045a2 <_svfiprintf_r+0x152>
 8004590:	2340      	movs	r3, #64	; 0x40
 8004592:	eba0 000a 	sub.w	r0, r0, sl
 8004596:	fa03 f000 	lsl.w	r0, r3, r0
 800459a:	9b04      	ldr	r3, [sp, #16]
 800459c:	4303      	orrs	r3, r0
 800459e:	3401      	adds	r4, #1
 80045a0:	9304      	str	r3, [sp, #16]
 80045a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045a6:	4826      	ldr	r0, [pc, #152]	; (8004640 <_svfiprintf_r+0x1f0>)
 80045a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045ac:	2206      	movs	r2, #6
 80045ae:	f7fb fe17 	bl	80001e0 <memchr>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d038      	beq.n	8004628 <_svfiprintf_r+0x1d8>
 80045b6:	4b23      	ldr	r3, [pc, #140]	; (8004644 <_svfiprintf_r+0x1f4>)
 80045b8:	bb1b      	cbnz	r3, 8004602 <_svfiprintf_r+0x1b2>
 80045ba:	9b03      	ldr	r3, [sp, #12]
 80045bc:	3307      	adds	r3, #7
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	3308      	adds	r3, #8
 80045c4:	9303      	str	r3, [sp, #12]
 80045c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c8:	4433      	add	r3, r6
 80045ca:	9309      	str	r3, [sp, #36]	; 0x24
 80045cc:	e767      	b.n	800449e <_svfiprintf_r+0x4e>
 80045ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80045d2:	460c      	mov	r4, r1
 80045d4:	2001      	movs	r0, #1
 80045d6:	e7a5      	b.n	8004524 <_svfiprintf_r+0xd4>
 80045d8:	2300      	movs	r3, #0
 80045da:	3401      	adds	r4, #1
 80045dc:	9305      	str	r3, [sp, #20]
 80045de:	4619      	mov	r1, r3
 80045e0:	f04f 0c0a 	mov.w	ip, #10
 80045e4:	4620      	mov	r0, r4
 80045e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045ea:	3a30      	subs	r2, #48	; 0x30
 80045ec:	2a09      	cmp	r2, #9
 80045ee:	d903      	bls.n	80045f8 <_svfiprintf_r+0x1a8>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0c5      	beq.n	8004580 <_svfiprintf_r+0x130>
 80045f4:	9105      	str	r1, [sp, #20]
 80045f6:	e7c3      	b.n	8004580 <_svfiprintf_r+0x130>
 80045f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045fc:	4604      	mov	r4, r0
 80045fe:	2301      	movs	r3, #1
 8004600:	e7f0      	b.n	80045e4 <_svfiprintf_r+0x194>
 8004602:	ab03      	add	r3, sp, #12
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	462a      	mov	r2, r5
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <_svfiprintf_r+0x1f8>)
 800460a:	a904      	add	r1, sp, #16
 800460c:	4638      	mov	r0, r7
 800460e:	f3af 8000 	nop.w
 8004612:	1c42      	adds	r2, r0, #1
 8004614:	4606      	mov	r6, r0
 8004616:	d1d6      	bne.n	80045c6 <_svfiprintf_r+0x176>
 8004618:	89ab      	ldrh	r3, [r5, #12]
 800461a:	065b      	lsls	r3, r3, #25
 800461c:	f53f af2c 	bmi.w	8004478 <_svfiprintf_r+0x28>
 8004620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004622:	b01d      	add	sp, #116	; 0x74
 8004624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004628:	ab03      	add	r3, sp, #12
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	462a      	mov	r2, r5
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <_svfiprintf_r+0x1f8>)
 8004630:	a904      	add	r1, sp, #16
 8004632:	4638      	mov	r0, r7
 8004634:	f000 f87a 	bl	800472c <_printf_i>
 8004638:	e7eb      	b.n	8004612 <_svfiprintf_r+0x1c2>
 800463a:	bf00      	nop
 800463c:	08004cb0 	.word	0x08004cb0
 8004640:	08004cba 	.word	0x08004cba
 8004644:	00000000 	.word	0x00000000
 8004648:	08004399 	.word	0x08004399
 800464c:	08004cb6 	.word	0x08004cb6

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4616      	mov	r6, r2
 8004656:	4699      	mov	r9, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004660:	4293      	cmp	r3, r2
 8004662:	bfb8      	it	lt
 8004664:	4613      	movlt	r3, r2
 8004666:	6033      	str	r3, [r6, #0]
 8004668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466c:	4607      	mov	r7, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b10a      	cbz	r2, 8004676 <_printf_common+0x26>
 8004672:	3301      	adds	r3, #1
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	6833      	ldrmi	r3, [r6, #0]
 800467e:	3302      	addmi	r3, #2
 8004680:	6033      	strmi	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	f015 0506 	ands.w	r5, r5, #6
 8004688:	d106      	bne.n	8004698 <_printf_common+0x48>
 800468a:	f104 0a19 	add.w	sl, r4, #25
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	6832      	ldr	r2, [r6, #0]
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	42ab      	cmp	r3, r5
 8004696:	dc26      	bgt.n	80046e6 <_printf_common+0x96>
 8004698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800469c:	1e13      	subs	r3, r2, #0
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	bf18      	it	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d42b      	bmi.n	8004700 <_printf_common+0xb0>
 80046a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ac:	4649      	mov	r1, r9
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d01e      	beq.n	80046f4 <_printf_common+0xa4>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	68e5      	ldr	r5, [r4, #12]
 80046ba:	6832      	ldr	r2, [r6, #0]
 80046bc:	f003 0306 	and.w	r3, r3, #6
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	bf08      	it	eq
 80046c4:	1aad      	subeq	r5, r5, r2
 80046c6:	68a3      	ldr	r3, [r4, #8]
 80046c8:	6922      	ldr	r2, [r4, #16]
 80046ca:	bf0c      	ite	eq
 80046cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d0:	2500      	movne	r5, #0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfc4      	itt	gt
 80046d6:	1a9b      	subgt	r3, r3, r2
 80046d8:	18ed      	addgt	r5, r5, r3
 80046da:	2600      	movs	r6, #0
 80046dc:	341a      	adds	r4, #26
 80046de:	42b5      	cmp	r5, r6
 80046e0:	d11a      	bne.n	8004718 <_printf_common+0xc8>
 80046e2:	2000      	movs	r0, #0
 80046e4:	e008      	b.n	80046f8 <_printf_common+0xa8>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4652      	mov	r2, sl
 80046ea:	4649      	mov	r1, r9
 80046ec:	4638      	mov	r0, r7
 80046ee:	47c0      	blx	r8
 80046f0:	3001      	adds	r0, #1
 80046f2:	d103      	bne.n	80046fc <_printf_common+0xac>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7c6      	b.n	800468e <_printf_common+0x3e>
 8004700:	18e1      	adds	r1, r4, r3
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	2030      	movs	r0, #48	; 0x30
 8004706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800470a:	4422      	add	r2, r4
 800470c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004714:	3302      	adds	r3, #2
 8004716:	e7c7      	b.n	80046a8 <_printf_common+0x58>
 8004718:	2301      	movs	r3, #1
 800471a:	4622      	mov	r2, r4
 800471c:	4649      	mov	r1, r9
 800471e:	4638      	mov	r0, r7
 8004720:	47c0      	blx	r8
 8004722:	3001      	adds	r0, #1
 8004724:	d0e6      	beq.n	80046f4 <_printf_common+0xa4>
 8004726:	3601      	adds	r6, #1
 8004728:	e7d9      	b.n	80046de <_printf_common+0x8e>
	...

0800472c <_printf_i>:
 800472c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	7e0f      	ldrb	r7, [r1, #24]
 8004732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004734:	2f78      	cmp	r7, #120	; 0x78
 8004736:	4691      	mov	r9, r2
 8004738:	4680      	mov	r8, r0
 800473a:	460c      	mov	r4, r1
 800473c:	469a      	mov	sl, r3
 800473e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004742:	d807      	bhi.n	8004754 <_printf_i+0x28>
 8004744:	2f62      	cmp	r7, #98	; 0x62
 8004746:	d80a      	bhi.n	800475e <_printf_i+0x32>
 8004748:	2f00      	cmp	r7, #0
 800474a:	f000 80d8 	beq.w	80048fe <_printf_i+0x1d2>
 800474e:	2f58      	cmp	r7, #88	; 0x58
 8004750:	f000 80a3 	beq.w	800489a <_printf_i+0x16e>
 8004754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800475c:	e03a      	b.n	80047d4 <_printf_i+0xa8>
 800475e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004762:	2b15      	cmp	r3, #21
 8004764:	d8f6      	bhi.n	8004754 <_printf_i+0x28>
 8004766:	a101      	add	r1, pc, #4	; (adr r1, 800476c <_printf_i+0x40>)
 8004768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047d9 	.word	0x080047d9
 8004774:	08004755 	.word	0x08004755
 8004778:	08004755 	.word	0x08004755
 800477c:	08004755 	.word	0x08004755
 8004780:	08004755 	.word	0x08004755
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004755 	.word	0x08004755
 800478c:	08004755 	.word	0x08004755
 8004790:	08004755 	.word	0x08004755
 8004794:	08004755 	.word	0x08004755
 8004798:	080048e5 	.word	0x080048e5
 800479c:	08004809 	.word	0x08004809
 80047a0:	080048c7 	.word	0x080048c7
 80047a4:	08004755 	.word	0x08004755
 80047a8:	08004755 	.word	0x08004755
 80047ac:	08004907 	.word	0x08004907
 80047b0:	08004755 	.word	0x08004755
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004755 	.word	0x08004755
 80047bc:	08004755 	.word	0x08004755
 80047c0:	080048cf 	.word	0x080048cf
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	602a      	str	r2, [r5, #0]
 80047cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0a3      	b.n	8004920 <_printf_i+0x1f4>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	6829      	ldr	r1, [r5, #0]
 80047dc:	0606      	lsls	r6, r0, #24
 80047de:	f101 0304 	add.w	r3, r1, #4
 80047e2:	d50a      	bpl.n	80047fa <_printf_i+0xce>
 80047e4:	680e      	ldr	r6, [r1, #0]
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	da03      	bge.n	80047f4 <_printf_i+0xc8>
 80047ec:	232d      	movs	r3, #45	; 0x2d
 80047ee:	4276      	negs	r6, r6
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	485e      	ldr	r0, [pc, #376]	; (8004970 <_printf_i+0x244>)
 80047f6:	230a      	movs	r3, #10
 80047f8:	e019      	b.n	800482e <_printf_i+0x102>
 80047fa:	680e      	ldr	r6, [r1, #0]
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004802:	bf18      	it	ne
 8004804:	b236      	sxthne	r6, r6
 8004806:	e7ef      	b.n	80047e8 <_printf_i+0xbc>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	1d19      	adds	r1, r3, #4
 800480e:	6029      	str	r1, [r5, #0]
 8004810:	0601      	lsls	r1, r0, #24
 8004812:	d501      	bpl.n	8004818 <_printf_i+0xec>
 8004814:	681e      	ldr	r6, [r3, #0]
 8004816:	e002      	b.n	800481e <_printf_i+0xf2>
 8004818:	0646      	lsls	r6, r0, #25
 800481a:	d5fb      	bpl.n	8004814 <_printf_i+0xe8>
 800481c:	881e      	ldrh	r6, [r3, #0]
 800481e:	4854      	ldr	r0, [pc, #336]	; (8004970 <_printf_i+0x244>)
 8004820:	2f6f      	cmp	r7, #111	; 0x6f
 8004822:	bf0c      	ite	eq
 8004824:	2308      	moveq	r3, #8
 8004826:	230a      	movne	r3, #10
 8004828:	2100      	movs	r1, #0
 800482a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800482e:	6865      	ldr	r5, [r4, #4]
 8004830:	60a5      	str	r5, [r4, #8]
 8004832:	2d00      	cmp	r5, #0
 8004834:	bfa2      	ittt	ge
 8004836:	6821      	ldrge	r1, [r4, #0]
 8004838:	f021 0104 	bicge.w	r1, r1, #4
 800483c:	6021      	strge	r1, [r4, #0]
 800483e:	b90e      	cbnz	r6, 8004844 <_printf_i+0x118>
 8004840:	2d00      	cmp	r5, #0
 8004842:	d04d      	beq.n	80048e0 <_printf_i+0x1b4>
 8004844:	4615      	mov	r5, r2
 8004846:	fbb6 f1f3 	udiv	r1, r6, r3
 800484a:	fb03 6711 	mls	r7, r3, r1, r6
 800484e:	5dc7      	ldrb	r7, [r0, r7]
 8004850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004854:	4637      	mov	r7, r6
 8004856:	42bb      	cmp	r3, r7
 8004858:	460e      	mov	r6, r1
 800485a:	d9f4      	bls.n	8004846 <_printf_i+0x11a>
 800485c:	2b08      	cmp	r3, #8
 800485e:	d10b      	bne.n	8004878 <_printf_i+0x14c>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	07de      	lsls	r6, r3, #31
 8004864:	d508      	bpl.n	8004878 <_printf_i+0x14c>
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	6861      	ldr	r1, [r4, #4]
 800486a:	4299      	cmp	r1, r3
 800486c:	bfde      	ittt	le
 800486e:	2330      	movle	r3, #48	; 0x30
 8004870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004878:	1b52      	subs	r2, r2, r5
 800487a:	6122      	str	r2, [r4, #16]
 800487c:	f8cd a000 	str.w	sl, [sp]
 8004880:	464b      	mov	r3, r9
 8004882:	aa03      	add	r2, sp, #12
 8004884:	4621      	mov	r1, r4
 8004886:	4640      	mov	r0, r8
 8004888:	f7ff fee2 	bl	8004650 <_printf_common>
 800488c:	3001      	adds	r0, #1
 800488e:	d14c      	bne.n	800492a <_printf_i+0x1fe>
 8004890:	f04f 30ff 	mov.w	r0, #4294967295
 8004894:	b004      	add	sp, #16
 8004896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800489a:	4835      	ldr	r0, [pc, #212]	; (8004970 <_printf_i+0x244>)
 800489c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048a0:	6829      	ldr	r1, [r5, #0]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048a8:	6029      	str	r1, [r5, #0]
 80048aa:	061d      	lsls	r5, r3, #24
 80048ac:	d514      	bpl.n	80048d8 <_printf_i+0x1ac>
 80048ae:	07df      	lsls	r7, r3, #31
 80048b0:	bf44      	itt	mi
 80048b2:	f043 0320 	orrmi.w	r3, r3, #32
 80048b6:	6023      	strmi	r3, [r4, #0]
 80048b8:	b91e      	cbnz	r6, 80048c2 <_printf_i+0x196>
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f023 0320 	bic.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	2310      	movs	r3, #16
 80048c4:	e7b0      	b.n	8004828 <_printf_i+0xfc>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f043 0320 	orr.w	r3, r3, #32
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	2378      	movs	r3, #120	; 0x78
 80048d0:	4828      	ldr	r0, [pc, #160]	; (8004974 <_printf_i+0x248>)
 80048d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048d6:	e7e3      	b.n	80048a0 <_printf_i+0x174>
 80048d8:	0659      	lsls	r1, r3, #25
 80048da:	bf48      	it	mi
 80048dc:	b2b6      	uxthmi	r6, r6
 80048de:	e7e6      	b.n	80048ae <_printf_i+0x182>
 80048e0:	4615      	mov	r5, r2
 80048e2:	e7bb      	b.n	800485c <_printf_i+0x130>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	6826      	ldr	r6, [r4, #0]
 80048e8:	6961      	ldr	r1, [r4, #20]
 80048ea:	1d18      	adds	r0, r3, #4
 80048ec:	6028      	str	r0, [r5, #0]
 80048ee:	0635      	lsls	r5, r6, #24
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	d501      	bpl.n	80048f8 <_printf_i+0x1cc>
 80048f4:	6019      	str	r1, [r3, #0]
 80048f6:	e002      	b.n	80048fe <_printf_i+0x1d2>
 80048f8:	0670      	lsls	r0, r6, #25
 80048fa:	d5fb      	bpl.n	80048f4 <_printf_i+0x1c8>
 80048fc:	8019      	strh	r1, [r3, #0]
 80048fe:	2300      	movs	r3, #0
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	4615      	mov	r5, r2
 8004904:	e7ba      	b.n	800487c <_printf_i+0x150>
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	1d1a      	adds	r2, r3, #4
 800490a:	602a      	str	r2, [r5, #0]
 800490c:	681d      	ldr	r5, [r3, #0]
 800490e:	6862      	ldr	r2, [r4, #4]
 8004910:	2100      	movs	r1, #0
 8004912:	4628      	mov	r0, r5
 8004914:	f7fb fc64 	bl	80001e0 <memchr>
 8004918:	b108      	cbz	r0, 800491e <_printf_i+0x1f2>
 800491a:	1b40      	subs	r0, r0, r5
 800491c:	6060      	str	r0, [r4, #4]
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	6123      	str	r3, [r4, #16]
 8004922:	2300      	movs	r3, #0
 8004924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004928:	e7a8      	b.n	800487c <_printf_i+0x150>
 800492a:	6923      	ldr	r3, [r4, #16]
 800492c:	462a      	mov	r2, r5
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	47d0      	blx	sl
 8004934:	3001      	adds	r0, #1
 8004936:	d0ab      	beq.n	8004890 <_printf_i+0x164>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	079b      	lsls	r3, r3, #30
 800493c:	d413      	bmi.n	8004966 <_printf_i+0x23a>
 800493e:	68e0      	ldr	r0, [r4, #12]
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	4298      	cmp	r0, r3
 8004944:	bfb8      	it	lt
 8004946:	4618      	movlt	r0, r3
 8004948:	e7a4      	b.n	8004894 <_printf_i+0x168>
 800494a:	2301      	movs	r3, #1
 800494c:	4632      	mov	r2, r6
 800494e:	4649      	mov	r1, r9
 8004950:	4640      	mov	r0, r8
 8004952:	47d0      	blx	sl
 8004954:	3001      	adds	r0, #1
 8004956:	d09b      	beq.n	8004890 <_printf_i+0x164>
 8004958:	3501      	adds	r5, #1
 800495a:	68e3      	ldr	r3, [r4, #12]
 800495c:	9903      	ldr	r1, [sp, #12]
 800495e:	1a5b      	subs	r3, r3, r1
 8004960:	42ab      	cmp	r3, r5
 8004962:	dcf2      	bgt.n	800494a <_printf_i+0x21e>
 8004964:	e7eb      	b.n	800493e <_printf_i+0x212>
 8004966:	2500      	movs	r5, #0
 8004968:	f104 0619 	add.w	r6, r4, #25
 800496c:	e7f5      	b.n	800495a <_printf_i+0x22e>
 800496e:	bf00      	nop
 8004970:	08004cc1 	.word	0x08004cc1
 8004974:	08004cd2 	.word	0x08004cd2

08004978 <memmove>:
 8004978:	4288      	cmp	r0, r1
 800497a:	b510      	push	{r4, lr}
 800497c:	eb01 0402 	add.w	r4, r1, r2
 8004980:	d902      	bls.n	8004988 <memmove+0x10>
 8004982:	4284      	cmp	r4, r0
 8004984:	4623      	mov	r3, r4
 8004986:	d807      	bhi.n	8004998 <memmove+0x20>
 8004988:	1e43      	subs	r3, r0, #1
 800498a:	42a1      	cmp	r1, r4
 800498c:	d008      	beq.n	80049a0 <memmove+0x28>
 800498e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004996:	e7f8      	b.n	800498a <memmove+0x12>
 8004998:	4402      	add	r2, r0
 800499a:	4601      	mov	r1, r0
 800499c:	428a      	cmp	r2, r1
 800499e:	d100      	bne.n	80049a2 <memmove+0x2a>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049aa:	e7f7      	b.n	800499c <memmove+0x24>

080049ac <_free_r>:
 80049ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ae:	2900      	cmp	r1, #0
 80049b0:	d044      	beq.n	8004a3c <_free_r+0x90>
 80049b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b6:	9001      	str	r0, [sp, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f1a1 0404 	sub.w	r4, r1, #4
 80049be:	bfb8      	it	lt
 80049c0:	18e4      	addlt	r4, r4, r3
 80049c2:	f000 f913 	bl	8004bec <__malloc_lock>
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <_free_r+0x94>)
 80049c8:	9801      	ldr	r0, [sp, #4]
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	b933      	cbnz	r3, 80049dc <_free_r+0x30>
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	6014      	str	r4, [r2, #0]
 80049d2:	b003      	add	sp, #12
 80049d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d8:	f000 b90e 	b.w	8004bf8 <__malloc_unlock>
 80049dc:	42a3      	cmp	r3, r4
 80049de:	d908      	bls.n	80049f2 <_free_r+0x46>
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	1961      	adds	r1, r4, r5
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf01      	itttt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	1949      	addeq	r1, r1, r5
 80049ee:	6021      	streq	r1, [r4, #0]
 80049f0:	e7ed      	b.n	80049ce <_free_r+0x22>
 80049f2:	461a      	mov	r2, r3
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	b10b      	cbz	r3, 80049fc <_free_r+0x50>
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	d9fa      	bls.n	80049f2 <_free_r+0x46>
 80049fc:	6811      	ldr	r1, [r2, #0]
 80049fe:	1855      	adds	r5, r2, r1
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	d10b      	bne.n	8004a1c <_free_r+0x70>
 8004a04:	6824      	ldr	r4, [r4, #0]
 8004a06:	4421      	add	r1, r4
 8004a08:	1854      	adds	r4, r2, r1
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	d1e0      	bne.n	80049d2 <_free_r+0x26>
 8004a10:	681c      	ldr	r4, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	6053      	str	r3, [r2, #4]
 8004a16:	4421      	add	r1, r4
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	e7da      	b.n	80049d2 <_free_r+0x26>
 8004a1c:	d902      	bls.n	8004a24 <_free_r+0x78>
 8004a1e:	230c      	movs	r3, #12
 8004a20:	6003      	str	r3, [r0, #0]
 8004a22:	e7d6      	b.n	80049d2 <_free_r+0x26>
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf04      	itt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	bf04      	itt	eq
 8004a34:	1949      	addeq	r1, r1, r5
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	6054      	str	r4, [r2, #4]
 8004a3a:	e7ca      	b.n	80049d2 <_free_r+0x26>
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd30      	pop	{r4, r5, pc}
 8004a40:	20012e94 	.word	0x20012e94

08004a44 <sbrk_aligned>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4e0e      	ldr	r6, [pc, #56]	; (8004a80 <sbrk_aligned+0x3c>)
 8004a48:	460c      	mov	r4, r1
 8004a4a:	6831      	ldr	r1, [r6, #0]
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b911      	cbnz	r1, 8004a56 <sbrk_aligned+0x12>
 8004a50:	f000 f8bc 	bl	8004bcc <_sbrk_r>
 8004a54:	6030      	str	r0, [r6, #0]
 8004a56:	4621      	mov	r1, r4
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f000 f8b7 	bl	8004bcc <_sbrk_r>
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	d00a      	beq.n	8004a78 <sbrk_aligned+0x34>
 8004a62:	1cc4      	adds	r4, r0, #3
 8004a64:	f024 0403 	bic.w	r4, r4, #3
 8004a68:	42a0      	cmp	r0, r4
 8004a6a:	d007      	beq.n	8004a7c <sbrk_aligned+0x38>
 8004a6c:	1a21      	subs	r1, r4, r0
 8004a6e:	4628      	mov	r0, r5
 8004a70:	f000 f8ac 	bl	8004bcc <_sbrk_r>
 8004a74:	3001      	adds	r0, #1
 8004a76:	d101      	bne.n	8004a7c <sbrk_aligned+0x38>
 8004a78:	f04f 34ff 	mov.w	r4, #4294967295
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	20012e98 	.word	0x20012e98

08004a84 <_malloc_r>:
 8004a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a88:	1ccd      	adds	r5, r1, #3
 8004a8a:	f025 0503 	bic.w	r5, r5, #3
 8004a8e:	3508      	adds	r5, #8
 8004a90:	2d0c      	cmp	r5, #12
 8004a92:	bf38      	it	cc
 8004a94:	250c      	movcc	r5, #12
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	4607      	mov	r7, r0
 8004a9a:	db01      	blt.n	8004aa0 <_malloc_r+0x1c>
 8004a9c:	42a9      	cmp	r1, r5
 8004a9e:	d905      	bls.n	8004aac <_malloc_r+0x28>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	2600      	movs	r6, #0
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aac:	4e2e      	ldr	r6, [pc, #184]	; (8004b68 <_malloc_r+0xe4>)
 8004aae:	f000 f89d 	bl	8004bec <__malloc_lock>
 8004ab2:	6833      	ldr	r3, [r6, #0]
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	bb34      	cbnz	r4, 8004b06 <_malloc_r+0x82>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7ff ffc2 	bl	8004a44 <sbrk_aligned>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	d14d      	bne.n	8004b62 <_malloc_r+0xde>
 8004ac6:	6834      	ldr	r4, [r6, #0]
 8004ac8:	4626      	mov	r6, r4
 8004aca:	2e00      	cmp	r6, #0
 8004acc:	d140      	bne.n	8004b50 <_malloc_r+0xcc>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	eb04 0803 	add.w	r8, r4, r3
 8004ad8:	f000 f878 	bl	8004bcc <_sbrk_r>
 8004adc:	4580      	cmp	r8, r0
 8004ade:	d13a      	bne.n	8004b56 <_malloc_r+0xd2>
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	3503      	adds	r5, #3
 8004ae4:	1a6d      	subs	r5, r5, r1
 8004ae6:	f025 0503 	bic.w	r5, r5, #3
 8004aea:	3508      	adds	r5, #8
 8004aec:	2d0c      	cmp	r5, #12
 8004aee:	bf38      	it	cc
 8004af0:	250c      	movcc	r5, #12
 8004af2:	4629      	mov	r1, r5
 8004af4:	4638      	mov	r0, r7
 8004af6:	f7ff ffa5 	bl	8004a44 <sbrk_aligned>
 8004afa:	3001      	adds	r0, #1
 8004afc:	d02b      	beq.n	8004b56 <_malloc_r+0xd2>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	442b      	add	r3, r5
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	e00e      	b.n	8004b24 <_malloc_r+0xa0>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	1b52      	subs	r2, r2, r5
 8004b0a:	d41e      	bmi.n	8004b4a <_malloc_r+0xc6>
 8004b0c:	2a0b      	cmp	r2, #11
 8004b0e:	d916      	bls.n	8004b3e <_malloc_r+0xba>
 8004b10:	1961      	adds	r1, r4, r5
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	6025      	str	r5, [r4, #0]
 8004b16:	bf18      	it	ne
 8004b18:	6059      	strne	r1, [r3, #4]
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	bf08      	it	eq
 8004b1e:	6031      	streq	r1, [r6, #0]
 8004b20:	5162      	str	r2, [r4, r5]
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	4638      	mov	r0, r7
 8004b26:	f104 060b 	add.w	r6, r4, #11
 8004b2a:	f000 f865 	bl	8004bf8 <__malloc_unlock>
 8004b2e:	f026 0607 	bic.w	r6, r6, #7
 8004b32:	1d23      	adds	r3, r4, #4
 8004b34:	1af2      	subs	r2, r6, r3
 8004b36:	d0b6      	beq.n	8004aa6 <_malloc_r+0x22>
 8004b38:	1b9b      	subs	r3, r3, r6
 8004b3a:	50a3      	str	r3, [r4, r2]
 8004b3c:	e7b3      	b.n	8004aa6 <_malloc_r+0x22>
 8004b3e:	6862      	ldr	r2, [r4, #4]
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	bf0c      	ite	eq
 8004b44:	6032      	streq	r2, [r6, #0]
 8004b46:	605a      	strne	r2, [r3, #4]
 8004b48:	e7ec      	b.n	8004b24 <_malloc_r+0xa0>
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	6864      	ldr	r4, [r4, #4]
 8004b4e:	e7b2      	b.n	8004ab6 <_malloc_r+0x32>
 8004b50:	4634      	mov	r4, r6
 8004b52:	6876      	ldr	r6, [r6, #4]
 8004b54:	e7b9      	b.n	8004aca <_malloc_r+0x46>
 8004b56:	230c      	movs	r3, #12
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f84c 	bl	8004bf8 <__malloc_unlock>
 8004b60:	e7a1      	b.n	8004aa6 <_malloc_r+0x22>
 8004b62:	6025      	str	r5, [r4, #0]
 8004b64:	e7de      	b.n	8004b24 <_malloc_r+0xa0>
 8004b66:	bf00      	nop
 8004b68:	20012e94 	.word	0x20012e94

08004b6c <_realloc_r>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	4680      	mov	r8, r0
 8004b72:	4614      	mov	r4, r2
 8004b74:	460e      	mov	r6, r1
 8004b76:	b921      	cbnz	r1, 8004b82 <_realloc_r+0x16>
 8004b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	f7ff bf81 	b.w	8004a84 <_malloc_r>
 8004b82:	b92a      	cbnz	r2, 8004b90 <_realloc_r+0x24>
 8004b84:	f7ff ff12 	bl	80049ac <_free_r>
 8004b88:	4625      	mov	r5, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b90:	f000 f838 	bl	8004c04 <_malloc_usable_size_r>
 8004b94:	4284      	cmp	r4, r0
 8004b96:	4607      	mov	r7, r0
 8004b98:	d802      	bhi.n	8004ba0 <_realloc_r+0x34>
 8004b9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b9e:	d812      	bhi.n	8004bc6 <_realloc_r+0x5a>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff ff6e 	bl	8004a84 <_malloc_r>
 8004ba8:	4605      	mov	r5, r0
 8004baa:	2800      	cmp	r0, #0
 8004bac:	d0ed      	beq.n	8004b8a <_realloc_r+0x1e>
 8004bae:	42bc      	cmp	r4, r7
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	bf28      	it	cs
 8004bb6:	463a      	movcs	r2, r7
 8004bb8:	f7ff fbb8 	bl	800432c <memcpy>
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fef4 	bl	80049ac <_free_r>
 8004bc4:	e7e1      	b.n	8004b8a <_realloc_r+0x1e>
 8004bc6:	4635      	mov	r5, r6
 8004bc8:	e7df      	b.n	8004b8a <_realloc_r+0x1e>
	...

08004bcc <_sbrk_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4d06      	ldr	r5, [pc, #24]	; (8004be8 <_sbrk_r+0x1c>)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fb fe8c 	bl	80008f4 <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_sbrk_r+0x1a>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_sbrk_r+0x1a>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	20012e9c 	.word	0x20012e9c

08004bec <__malloc_lock>:
 8004bec:	4801      	ldr	r0, [pc, #4]	; (8004bf4 <__malloc_lock+0x8>)
 8004bee:	f000 b811 	b.w	8004c14 <__retarget_lock_acquire_recursive>
 8004bf2:	bf00      	nop
 8004bf4:	20012ea0 	.word	0x20012ea0

08004bf8 <__malloc_unlock>:
 8004bf8:	4801      	ldr	r0, [pc, #4]	; (8004c00 <__malloc_unlock+0x8>)
 8004bfa:	f000 b80c 	b.w	8004c16 <__retarget_lock_release_recursive>
 8004bfe:	bf00      	nop
 8004c00:	20012ea0 	.word	0x20012ea0

08004c04 <_malloc_usable_size_r>:
 8004c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c08:	1f18      	subs	r0, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bfbc      	itt	lt
 8004c0e:	580b      	ldrlt	r3, [r1, r0]
 8004c10:	18c0      	addlt	r0, r0, r3
 8004c12:	4770      	bx	lr

08004c14 <__retarget_lock_acquire_recursive>:
 8004c14:	4770      	bx	lr

08004c16 <__retarget_lock_release_recursive>:
 8004c16:	4770      	bx	lr

08004c18 <_init>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr

08004c24 <_fini>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr
